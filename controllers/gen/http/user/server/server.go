// Code generated by goa v3.0.6, DO NOT EDIT.
//
// user HTTP server
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package server

import (
	"context"
	"net/http"

	user "github.com/anshap1719/authentication/controllers/gen/user"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the user service endpoint HTTP handlers.
type Server struct {
	Mounts            []*MountPoint
	GetAuths          http.Handler
	Deactivate        http.Handler
	GetUser           http.Handler
	ValidateEmail     http.Handler
	UpdateUser        http.Handler
	ResendVerifyEmail http.Handler
	UpdatePhone       http.Handler
	ResendOtp         http.Handler
	VerifyPhone       http.Handler
	CORS              http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the user service endpoints.
func New(
	e *user.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetAuths", "GET", "/user/authstat"},
			{"Deactivate", "DELETE", "/user"},
			{"GetUser", "GET", "/user"},
			{"ValidateEmail", "GET", "/user/verifyemail/{validateID}"},
			{"UpdateUser", "POST", "/user"},
			{"ResendVerifyEmail", "POST", "/user/resend-verify"},
			{"UpdatePhone", "GET", "/user/update-phone"},
			{"ResendOtp", "GET", "/user/resend-phone-otp"},
			{"VerifyPhone", "GET", "/user/verify-phone-otp"},
			{"CORS", "OPTIONS", "/user/authstat"},
			{"CORS", "OPTIONS", "/user"},
			{"CORS", "OPTIONS", "/user/verifyemail/{validateID}"},
			{"CORS", "OPTIONS", "/user/resend-verify"},
			{"CORS", "OPTIONS", "/user/update-phone"},
			{"CORS", "OPTIONS", "/user/resend-phone-otp"},
			{"CORS", "OPTIONS", "/user/verify-phone-otp"},
		},
		GetAuths:          NewGetAuthsHandler(e.GetAuths, mux, dec, enc, eh),
		Deactivate:        NewDeactivateHandler(e.Deactivate, mux, dec, enc, eh),
		GetUser:           NewGetUserHandler(e.GetUser, mux, dec, enc, eh),
		ValidateEmail:     NewValidateEmailHandler(e.ValidateEmail, mux, dec, enc, eh),
		UpdateUser:        NewUpdateUserHandler(e.UpdateUser, mux, dec, enc, eh),
		ResendVerifyEmail: NewResendVerifyEmailHandler(e.ResendVerifyEmail, mux, dec, enc, eh),
		UpdatePhone:       NewUpdatePhoneHandler(e.UpdatePhone, mux, dec, enc, eh),
		ResendOtp:         NewResendOtpHandler(e.ResendOtp, mux, dec, enc, eh),
		VerifyPhone:       NewVerifyPhoneHandler(e.VerifyPhone, mux, dec, enc, eh),
		CORS:              NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "user" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetAuths = m(s.GetAuths)
	s.Deactivate = m(s.Deactivate)
	s.GetUser = m(s.GetUser)
	s.ValidateEmail = m(s.ValidateEmail)
	s.UpdateUser = m(s.UpdateUser)
	s.ResendVerifyEmail = m(s.ResendVerifyEmail)
	s.UpdatePhone = m(s.UpdatePhone)
	s.ResendOtp = m(s.ResendOtp)
	s.VerifyPhone = m(s.VerifyPhone)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the user endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetAuthsHandler(mux, h.GetAuths)
	MountDeactivateHandler(mux, h.Deactivate)
	MountGetUserHandler(mux, h.GetUser)
	MountValidateEmailHandler(mux, h.ValidateEmail)
	MountUpdateUserHandler(mux, h.UpdateUser)
	MountResendVerifyEmailHandler(mux, h.ResendVerifyEmail)
	MountUpdatePhoneHandler(mux, h.UpdatePhone)
	MountResendOtpHandler(mux, h.ResendOtp)
	MountVerifyPhoneHandler(mux, h.VerifyPhone)
	MountCORSHandler(mux, h.CORS)
}

// MountGetAuthsHandler configures the mux to serve the "user" service
// "getAuths" endpoint.
func MountGetAuthsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/user/authstat", f)
}

// NewGetAuthsHandler creates a HTTP handler which loads the HTTP request and
// calls the "user" service "getAuths" endpoint.
func NewGetAuthsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeGetAuthsRequest(mux, dec)
		encodeResponse = EncodeGetAuthsResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getAuths")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountDeactivateHandler configures the mux to serve the "user" service
// "deactivate" endpoint.
func MountDeactivateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/user", f)
}

// NewDeactivateHandler creates a HTTP handler which loads the HTTP request and
// calls the "user" service "deactivate" endpoint.
func NewDeactivateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeDeactivateRequest(mux, dec)
		encodeResponse = EncodeDeactivateResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deactivate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountGetUserHandler configures the mux to serve the "user" service "getUser"
// endpoint.
func MountGetUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/user", f)
}

// NewGetUserHandler creates a HTTP handler which loads the HTTP request and
// calls the "user" service "getUser" endpoint.
func NewGetUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeGetUserRequest(mux, dec)
		encodeResponse = EncodeGetUserResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getUser")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountValidateEmailHandler configures the mux to serve the "user" service
// "validate-email" endpoint.
func MountValidateEmailHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/user/verifyemail/{validateID}", f)
}

// NewValidateEmailHandler creates a HTTP handler which loads the HTTP request
// and calls the "user" service "validate-email" endpoint.
func NewValidateEmailHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeValidateEmailRequest(mux, dec)
		encodeResponse = EncodeValidateEmailResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "validate-email")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountUpdateUserHandler configures the mux to serve the "user" service
// "update-user" endpoint.
func MountUpdateUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/user", f)
}

// NewUpdateUserHandler creates a HTTP handler which loads the HTTP request and
// calls the "user" service "update-user" endpoint.
func NewUpdateUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateUserRequest(mux, dec)
		encodeResponse = EncodeUpdateUserResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-user")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountResendVerifyEmailHandler configures the mux to serve the "user" service
// "resend-verify-email" endpoint.
func MountResendVerifyEmailHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/user/resend-verify", f)
}

// NewResendVerifyEmailHandler creates a HTTP handler which loads the HTTP
// request and calls the "user" service "resend-verify-email" endpoint.
func NewResendVerifyEmailHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeResendVerifyEmailRequest(mux, dec)
		encodeResponse = EncodeResendVerifyEmailResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "resend-verify-email")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountUpdatePhoneHandler configures the mux to serve the "user" service
// "update-phone" endpoint.
func MountUpdatePhoneHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/user/update-phone", f)
}

// NewUpdatePhoneHandler creates a HTTP handler which loads the HTTP request
// and calls the "user" service "update-phone" endpoint.
func NewUpdatePhoneHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeUpdatePhoneRequest(mux, dec)
		encodeResponse = EncodeUpdatePhoneResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-phone")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountResendOtpHandler configures the mux to serve the "user" service
// "resend-otp" endpoint.
func MountResendOtpHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/user/resend-phone-otp", f)
}

// NewResendOtpHandler creates a HTTP handler which loads the HTTP request and
// calls the "user" service "resend-otp" endpoint.
func NewResendOtpHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeResendOtpRequest(mux, dec)
		encodeResponse = EncodeResendOtpResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "resend-otp")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountVerifyPhoneHandler configures the mux to serve the "user" service
// "verify-phone" endpoint.
func MountVerifyPhoneHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/user/verify-phone-otp", f)
}

// NewVerifyPhoneHandler creates a HTTP handler which loads the HTTP request
// and calls the "user" service "verify-phone" endpoint.
func NewVerifyPhoneHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeVerifyPhoneRequest(mux, dec)
		encodeResponse = EncodeVerifyPhoneResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "verify-phone")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service user.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = handleUserOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/user/authstat", f)
	mux.Handle("OPTIONS", "/user", f)
	mux.Handle("OPTIONS", "/user/verifyemail/{validateID}", f)
	mux.Handle("OPTIONS", "/user/resend-verify", f)
	mux.Handle("OPTIONS", "/user/update-phone", f)
	mux.Handle("OPTIONS", "/user/resend-phone-otp", f)
	mux.Handle("OPTIONS", "/user/verify-phone-otp", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// handleUserOrigin applies the CORS response headers corresponding to the
// origin for the service user.
func handleUserOrigin(h http.Handler) http.Handler {
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Access-Control-Expose-Headers", "Authorization, X-Session")
			w.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PATCH, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "*")
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
