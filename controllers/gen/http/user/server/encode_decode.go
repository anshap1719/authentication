// Code generated by goa v3.0.6, DO NOT EDIT.
//
// user HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package server

import (
	"context"
	"io"
	"net/http"
	"strings"

	userviews "github.com/anshap1719/authentication/controllers/gen/user/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetAuthsResponse returns an encoder for responses returned by the user
// getAuths endpoint.
func EncodeGetAuthsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*userviews.AuthStatusMedia)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewGetAuthsResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetAuthsRequest returns a decoder for requests sent to the user
// getAuths endpoint.
func DecodeGetAuthsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			userID        *string
			authorization *string
			xSession      *string
			aPIKey        *string
		)
		userIDRaw := r.URL.Query().Get("userID")
		if userIDRaw != "" {
			userID = &userIDRaw
		}
		authorizationRaw := r.Header.Get("Authorization")
		if authorizationRaw != "" {
			authorization = &authorizationRaw
		}
		xSessionRaw := r.Header.Get("X-Session")
		if xSessionRaw != "" {
			xSession = &xSessionRaw
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewGetAuthsPayload(userID, authorization, xSession, aPIKey)

		return payload, nil
	}
}

// EncodeDeactivateResponse returns an encoder for responses returned by the
// user deactivate endpoint.
func EncodeDeactivateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeactivateRequest returns a decoder for requests sent to the user
// deactivate endpoint.
func DecodeDeactivateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id            *string
			admin         *string
			authorization *string
			xSession      *string
			aPIKey        *string
		)
		idRaw := r.URL.Query().Get("id")
		if idRaw != "" {
			id = &idRaw
		}
		adminRaw := r.URL.Query().Get("admin")
		if adminRaw != "" {
			admin = &adminRaw
		}
		authorizationRaw := r.Header.Get("Authorization")
		if authorizationRaw != "" {
			authorization = &authorizationRaw
		}
		xSessionRaw := r.Header.Get("X-Session")
		if xSessionRaw != "" {
			xSession = &xSessionRaw
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewDeactivatePayload(id, admin, authorization, xSession, aPIKey)
		if payload.Authorization != nil {
			if strings.Contains(*payload.Authorization, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Authorization, " ", 2)[1]
				payload.Authorization = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetUserResponse returns an encoder for responses returned by the user
// getUser endpoint.
func EncodeGetUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*userviews.UserMedia)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewGetUserResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetUserRequest returns a decoder for requests sent to the user getUser
// endpoint.
func DecodeGetUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			authorization *string
			xSession      *string
			aPIKey        *string
		)
		authorizationRaw := r.Header.Get("Authorization")
		if authorizationRaw != "" {
			authorization = &authorizationRaw
		}
		xSessionRaw := r.Header.Get("X-Session")
		if xSessionRaw != "" {
			xSession = &xSessionRaw
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewGetUserPayload(authorization, xSession, aPIKey)
		if payload.Authorization != nil {
			if strings.Contains(*payload.Authorization, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Authorization, " ", 2)[1]
				payload.Authorization = &cred
			}
		}

		return payload, nil
	}
}

// EncodeValidateEmailResponse returns an encoder for responses returned by the
// user validate-email endpoint.
func EncodeValidateEmailResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeValidateEmailRequest returns a decoder for requests sent to the user
// validate-email endpoint.
func DecodeValidateEmailRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			validateID string
			aPIKey     *string

			params = mux.Vars(r)
		)
		validateID = params["validateID"]
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewValidateEmailPayload(validateID, aPIKey)

		return payload, nil
	}
}

// EncodeUpdateUserResponse returns an encoder for responses returned by the
// user update-user endpoint.
func EncodeUpdateUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*userviews.UserMedia)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewUpdateUserResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateUserRequest returns a decoder for requests sent to the user
// update-user endpoint.
func DecodeUpdateUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateUserRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			authorization *string
			xSession      *string
			aPIKey        *string
		)
		authorizationRaw := r.Header.Get("Authorization")
		if authorizationRaw != "" {
			authorization = &authorizationRaw
		}
		xSessionRaw := r.Header.Get("X-Session")
		if xSessionRaw != "" {
			xSession = &xSessionRaw
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewUpdateUserUserUpdateParams(&body, authorization, xSession, aPIKey)
		if payload.Authorization != nil {
			if strings.Contains(*payload.Authorization, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Authorization, " ", 2)[1]
				payload.Authorization = &cred
			}
		}

		return payload, nil
	}
}

// EncodeResendVerifyEmailResponse returns an encoder for responses returned by
// the user resend-verify-email endpoint.
func EncodeResendVerifyEmailResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeResendVerifyEmailRequest returns a decoder for requests sent to the
// user resend-verify-email endpoint.
func DecodeResendVerifyEmailRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			authorization *string
			xSession      *string
			aPIKey        *string
		)
		authorizationRaw := r.Header.Get("Authorization")
		if authorizationRaw != "" {
			authorization = &authorizationRaw
		}
		xSessionRaw := r.Header.Get("X-Session")
		if xSessionRaw != "" {
			xSession = &xSessionRaw
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewResendVerifyEmailPayload(authorization, xSession, aPIKey)

		return payload, nil
	}
}

// EncodeUpdatePhoneResponse returns an encoder for responses returned by the
// user update-phone endpoint.
func EncodeUpdatePhoneResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeUpdatePhoneRequest returns a decoder for requests sent to the user
// update-phone endpoint.
func DecodeUpdatePhoneRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			phone         *string
			country       *string
			authorization *string
			xSession      *string
			aPIKey        *string
		)
		phoneRaw := r.URL.Query().Get("phone")
		if phoneRaw != "" {
			phone = &phoneRaw
		}
		countryRaw := r.URL.Query().Get("country")
		if countryRaw != "" {
			country = &countryRaw
		}
		authorizationRaw := r.Header.Get("Authorization")
		if authorizationRaw != "" {
			authorization = &authorizationRaw
		}
		xSessionRaw := r.Header.Get("X-Session")
		if xSessionRaw != "" {
			xSession = &xSessionRaw
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewUpdatePhonePayload(phone, country, authorization, xSession, aPIKey)
		if payload.Authorization != nil {
			if strings.Contains(*payload.Authorization, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Authorization, " ", 2)[1]
				payload.Authorization = &cred
			}
		}

		return payload, nil
	}
}

// EncodeResendOtpResponse returns an encoder for responses returned by the
// user resend-otp endpoint.
func EncodeResendOtpResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeResendOtpRequest returns a decoder for requests sent to the user
// resend-otp endpoint.
func DecodeResendOtpRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			authorization *string
			xSession      *string
			aPIKey        *string
		)
		authorizationRaw := r.Header.Get("Authorization")
		if authorizationRaw != "" {
			authorization = &authorizationRaw
		}
		xSessionRaw := r.Header.Get("X-Session")
		if xSessionRaw != "" {
			xSession = &xSessionRaw
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewResendOtpPayload(authorization, xSession, aPIKey)
		if payload.Authorization != nil {
			if strings.Contains(*payload.Authorization, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Authorization, " ", 2)[1]
				payload.Authorization = &cred
			}
		}

		return payload, nil
	}
}

// EncodeVerifyPhoneResponse returns an encoder for responses returned by the
// user verify-phone endpoint.
func EncodeVerifyPhoneResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeVerifyPhoneRequest returns a decoder for requests sent to the user
// verify-phone endpoint.
func DecodeVerifyPhoneRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			otp           *string
			authorization *string
			xSession      *string
			aPIKey        *string
		)
		otpRaw := r.URL.Query().Get("otp")
		if otpRaw != "" {
			otp = &otpRaw
		}
		authorizationRaw := r.Header.Get("Authorization")
		if authorizationRaw != "" {
			authorization = &authorizationRaw
		}
		xSessionRaw := r.Header.Get("X-Session")
		if xSessionRaw != "" {
			xSession = &xSessionRaw
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewVerifyPhonePayload(otp, authorization, xSession, aPIKey)
		if payload.Authorization != nil {
			if strings.Contains(*payload.Authorization, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Authorization, " ", 2)[1]
				payload.Authorization = &cred
			}
		}

		return payload, nil
	}
}
