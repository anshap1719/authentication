// Code generated by goa v3.0.6, DO NOT EDIT.
//
// user client HTTP transport
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the user service endpoint HTTP clients.
type Client struct {
	// GetAuths Doer is the HTTP client used to make requests to the getAuths
	// endpoint.
	GetAuthsDoer goahttp.Doer

	// Deactivate Doer is the HTTP client used to make requests to the deactivate
	// endpoint.
	DeactivateDoer goahttp.Doer

	// GetUser Doer is the HTTP client used to make requests to the getUser
	// endpoint.
	GetUserDoer goahttp.Doer

	// ValidateEmail Doer is the HTTP client used to make requests to the
	// validate-email endpoint.
	ValidateEmailDoer goahttp.Doer

	// UpdateUser Doer is the HTTP client used to make requests to the update-user
	// endpoint.
	UpdateUserDoer goahttp.Doer

	// ResendVerifyEmail Doer is the HTTP client used to make requests to the
	// resend-verify-email endpoint.
	ResendVerifyEmailDoer goahttp.Doer

	// UpdatePhone Doer is the HTTP client used to make requests to the
	// update-phone endpoint.
	UpdatePhoneDoer goahttp.Doer

	// ResendOtp Doer is the HTTP client used to make requests to the resend-otp
	// endpoint.
	ResendOtpDoer goahttp.Doer

	// VerifyPhone Doer is the HTTP client used to make requests to the
	// verify-phone endpoint.
	VerifyPhoneDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the user service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetAuthsDoer:          doer,
		DeactivateDoer:        doer,
		GetUserDoer:           doer,
		ValidateEmailDoer:     doer,
		UpdateUserDoer:        doer,
		ResendVerifyEmailDoer: doer,
		UpdatePhoneDoer:       doer,
		ResendOtpDoer:         doer,
		VerifyPhoneDoer:       doer,
		CORSDoer:              doer,
		RestoreResponseBody:   restoreBody,
		scheme:                scheme,
		host:                  host,
		decoder:               dec,
		encoder:               enc,
	}
}

// GetAuths returns an endpoint that makes HTTP requests to the user service
// getAuths server.
func (c *Client) GetAuths() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetAuthsRequest(c.encoder)
		decodeResponse = DecodeGetAuthsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetAuthsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAuthsDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("user", "getAuths", err)
		}
		return decodeResponse(resp)
	}
}

// Deactivate returns an endpoint that makes HTTP requests to the user service
// deactivate server.
func (c *Client) Deactivate() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeactivateRequest(c.encoder)
		decodeResponse = DecodeDeactivateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeactivateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeactivateDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("user", "deactivate", err)
		}
		return decodeResponse(resp)
	}
}

// GetUser returns an endpoint that makes HTTP requests to the user service
// getUser server.
func (c *Client) GetUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetUserRequest(c.encoder)
		decodeResponse = DecodeGetUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUserDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("user", "getUser", err)
		}
		return decodeResponse(resp)
	}
}

// ValidateEmail returns an endpoint that makes HTTP requests to the user
// service validate-email server.
func (c *Client) ValidateEmail() goa.Endpoint {
	var (
		encodeRequest  = EncodeValidateEmailRequest(c.encoder)
		decodeResponse = DecodeValidateEmailResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildValidateEmailRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ValidateEmailDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("user", "validate-email", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateUser returns an endpoint that makes HTTP requests to the user service
// update-user server.
func (c *Client) UpdateUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateUserRequest(c.encoder)
		decodeResponse = DecodeUpdateUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateUserDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("user", "update-user", err)
		}
		return decodeResponse(resp)
	}
}

// ResendVerifyEmail returns an endpoint that makes HTTP requests to the user
// service resend-verify-email server.
func (c *Client) ResendVerifyEmail() goa.Endpoint {
	var (
		encodeRequest  = EncodeResendVerifyEmailRequest(c.encoder)
		decodeResponse = DecodeResendVerifyEmailResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildResendVerifyEmailRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ResendVerifyEmailDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("user", "resend-verify-email", err)
		}
		return decodeResponse(resp)
	}
}

// UpdatePhone returns an endpoint that makes HTTP requests to the user service
// update-phone server.
func (c *Client) UpdatePhone() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdatePhoneRequest(c.encoder)
		decodeResponse = DecodeUpdatePhoneResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdatePhoneRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdatePhoneDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("user", "update-phone", err)
		}
		return decodeResponse(resp)
	}
}

// ResendOtp returns an endpoint that makes HTTP requests to the user service
// resend-otp server.
func (c *Client) ResendOtp() goa.Endpoint {
	var (
		encodeRequest  = EncodeResendOtpRequest(c.encoder)
		decodeResponse = DecodeResendOtpResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildResendOtpRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ResendOtpDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("user", "resend-otp", err)
		}
		return decodeResponse(resp)
	}
}

// VerifyPhone returns an endpoint that makes HTTP requests to the user service
// verify-phone server.
func (c *Client) VerifyPhone() goa.Endpoint {
	var (
		encodeRequest  = EncodeVerifyPhoneRequest(c.encoder)
		decodeResponse = DecodeVerifyPhoneResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildVerifyPhoneRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VerifyPhoneDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("user", "verify-phone", err)
		}
		return decodeResponse(resp)
	}
}
