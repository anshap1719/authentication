// Code generated by goa v3.0.6, DO NOT EDIT.
//
// user HTTP client types
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package client

import (
	user "github.com/anshap1719/authentication/controllers/gen/user"
	userviews "github.com/anshap1719/authentication/controllers/gen/user/views"
)

// UpdateUserRequestBody is the type of the "user" service "update-user"
// endpoint HTTP request body.
type UpdateUserRequestBody struct {
	// Given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Family name for the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Email attached to the account of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Phone Number Of the user
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// When the user attempts to change their email, this is what they will change
	// it to after they verify that it belongs to them
	ChangingEmail *string `form:"changingEmail,omitempty" json:"changingEmail,omitempty" xml:"changingEmail,omitempty"`
	// Whether the user has verified their email
	VerifiedEmail *bool `form:"verifiedEmail,omitempty" json:"verifiedEmail,omitempty" xml:"verifiedEmail,omitempty"`
	// Whether the user is an administrator on the site
	IsAdmin          *bool   `form:"isAdmin,omitempty" json:"isAdmin,omitempty" xml:"isAdmin,omitempty"`
	CountryPhoneCode *string `form:"countryPhoneCode,omitempty" json:"countryPhoneCode,omitempty" xml:"countryPhoneCode,omitempty"`
}

// GetAuthsResponseBody is the type of the "user" service "getAuths" endpoint
// HTTP response body.
type GetAuthsResponseBody struct {
	// True if user has google Oauth signin
	Google *bool `form:"google,omitempty" json:"google,omitempty" xml:"google,omitempty"`
	// True if user has facebook Oauth signin
	Facebook *bool `form:"facebook,omitempty" json:"facebook,omitempty" xml:"facebook,omitempty"`
	// True if user has twitter Oauth signin
	Twitter *bool `form:"twitter,omitempty" json:"twitter,omitempty" xml:"twitter,omitempty"`
	// True if user has linkedin Oauth signin
	Linkedin *bool `form:"linkedin,omitempty" json:"linkedin,omitempty" xml:"linkedin,omitempty"`
	// True if user has microsoft Oauth signin
	Instagram *bool `form:"instagram,omitempty" json:"instagram,omitempty" xml:"instagram,omitempty"`
	// True if user has password signin
	Standard *bool `form:"standard,omitempty" json:"standard,omitempty" xml:"standard,omitempty"`
}

// GetUserResponseBody is the type of the "user" service "getUser" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// Unique unchanging user ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Family name for the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Email attached to the account of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Phone Number Of the user
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// When the user attempts to change their email, this is what they will change
	// it to after they verify that it belongs to them
	ChangingEmail *string `form:"changingEmail,omitempty" json:"changingEmail,omitempty" xml:"changingEmail,omitempty"`
	// Whether the user has verified their email
	VerifiedEmail *bool `form:"verifiedEmail,omitempty" json:"verifiedEmail,omitempty" xml:"verifiedEmail,omitempty"`
	// Whether the user is an administrator on the site
	IsAdmin          *bool   `form:"isAdmin,omitempty" json:"isAdmin,omitempty" xml:"isAdmin,omitempty"`
	UpdatedAt        *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	IsActive         *bool   `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	CreatedAt        *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	CountryPhoneCode *string `form:"countryPhoneCode,omitempty" json:"countryPhoneCode,omitempty" xml:"countryPhoneCode,omitempty"`
	Authorization    *string `form:"Authorization,omitempty" json:"Authorization,omitempty" xml:"Authorization,omitempty"`
	XSession         *string `form:"X-Session,omitempty" json:"X-Session,omitempty" xml:"X-Session,omitempty"`
}

// UpdateUserResponseBody is the type of the "user" service "update-user"
// endpoint HTTP response body.
type UpdateUserResponseBody struct {
	// Unique unchanging user ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Family name for the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Email attached to the account of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Phone Number Of the user
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// When the user attempts to change their email, this is what they will change
	// it to after they verify that it belongs to them
	ChangingEmail *string `form:"changingEmail,omitempty" json:"changingEmail,omitempty" xml:"changingEmail,omitempty"`
	// Whether the user has verified their email
	VerifiedEmail *bool `form:"verifiedEmail,omitempty" json:"verifiedEmail,omitempty" xml:"verifiedEmail,omitempty"`
	// Whether the user is an administrator on the site
	IsAdmin          *bool   `form:"isAdmin,omitempty" json:"isAdmin,omitempty" xml:"isAdmin,omitempty"`
	UpdatedAt        *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	IsActive         *bool   `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	CreatedAt        *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	CountryPhoneCode *string `form:"countryPhoneCode,omitempty" json:"countryPhoneCode,omitempty" xml:"countryPhoneCode,omitempty"`
	Authorization    *string `form:"Authorization,omitempty" json:"Authorization,omitempty" xml:"Authorization,omitempty"`
	XSession         *string `form:"X-Session,omitempty" json:"X-Session,omitempty" xml:"X-Session,omitempty"`
}

// NewUpdateUserRequestBody builds the HTTP request body from the payload of
// the "update-user" endpoint of the "user" service.
func NewUpdateUserRequestBody(p *user.UserUpdateParams) *UpdateUserRequestBody {
	body := &UpdateUserRequestBody{
		FirstName:        p.FirstName,
		LastName:         p.LastName,
		Email:            p.Email,
		Phone:            p.Phone,
		ChangingEmail:    p.ChangingEmail,
		VerifiedEmail:    p.VerifiedEmail,
		IsAdmin:          p.IsAdmin,
		CountryPhoneCode: p.CountryPhoneCode,
	}
	return body
}

// NewGetAuthsAuthStatusMediaOK builds a "user" service "getAuths" endpoint
// result from a HTTP "OK" response.
func NewGetAuthsAuthStatusMediaOK(body *GetAuthsResponseBody) *userviews.AuthStatusMediaView {
	v := &userviews.AuthStatusMediaView{
		Google:    body.Google,
		Facebook:  body.Facebook,
		Twitter:   body.Twitter,
		Linkedin:  body.Linkedin,
		Instagram: body.Instagram,
		Standard:  body.Standard,
	}
	return v
}

// NewGetUserUserMediaOK builds a "user" service "getUser" endpoint result from
// a HTTP "OK" response.
func NewGetUserUserMediaOK(body *GetUserResponseBody) *userviews.UserMediaView {
	v := &userviews.UserMediaView{
		ID:               body.ID,
		FirstName:        body.FirstName,
		LastName:         body.LastName,
		Email:            body.Email,
		Phone:            body.Phone,
		ChangingEmail:    body.ChangingEmail,
		VerifiedEmail:    body.VerifiedEmail,
		IsAdmin:          body.IsAdmin,
		UpdatedAt:        body.UpdatedAt,
		IsActive:         body.IsActive,
		CreatedAt:        body.CreatedAt,
		CountryPhoneCode: body.CountryPhoneCode,
		Authorization:    body.Authorization,
		XSession:         body.XSession,
	}
	return v
}

// NewUpdateUserUserMediaOK builds a "user" service "update-user" endpoint
// result from a HTTP "OK" response.
func NewUpdateUserUserMediaOK(body *UpdateUserResponseBody) *userviews.UserMediaView {
	v := &userviews.UserMediaView{
		ID:               body.ID,
		FirstName:        body.FirstName,
		LastName:         body.LastName,
		Email:            body.Email,
		Phone:            body.Phone,
		ChangingEmail:    body.ChangingEmail,
		VerifiedEmail:    body.VerifiedEmail,
		IsAdmin:          body.IsAdmin,
		UpdatedAt:        body.UpdatedAt,
		IsActive:         body.IsActive,
		CreatedAt:        body.CreatedAt,
		CountryPhoneCode: body.CountryPhoneCode,
		Authorization:    body.Authorization,
		XSession:         body.XSession,
	}
	return v
}
