// Code generated by goa v3.0.6, DO NOT EDIT.
//
// auth HTTP client CLI support package
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	facebookc "github.com/anshap1719/authentication/controllers/gen/http/facebook/client"
	googlec "github.com/anshap1719/authentication/controllers/gen/http/google/client"
	instagramc "github.com/anshap1719/authentication/controllers/gen/http/instagram/client"
	linkedinc "github.com/anshap1719/authentication/controllers/gen/http/linkedin/client"
	monitoringc "github.com/anshap1719/authentication/controllers/gen/http/monitoring/client"
	passwordauthc "github.com/anshap1719/authentication/controllers/gen/http/password_auth/client"
	sessionc "github.com/anshap1719/authentication/controllers/gen/http/session/client"
	twitterc "github.com/anshap1719/authentication/controllers/gen/http/twitter/client"
	userc "github.com/anshap1719/authentication/controllers/gen/http/user/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `monitoring status
facebook (register-url|attach-to-account|detach-from-account|receive)
google (register-url|attach-to-account|detach-from-account|receive)
instagram (register-url|attach-to-account|detach-from-account|receive)
linkedin (register-url|attach-to-account|detach-from-account|receive)
password-auth (register|login|remove|change-password|reset|confirm-reset|check-email-available|check-phone-available)
session (refresh|logout|logout-other|logout-specific|get-sessions|redeem-token|clean-sessions|clean-login-token|clean-merge-token)
twitter (register-url|attach-to-account|detach-from-account|receive)
user (get-auths|deactivate|get-user|validate-email|update-user|resend-verify-email|update-phone|resend-otp|verify-phone)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` monitoring status` + "\n" +
		os.Args[0] + ` facebook register-url --api-key "Et aliquid amet voluptas."` + "\n" +
		os.Args[0] + ` google register-url --api-key "Officia recusandae ex debitis accusamus ducimus soluta." --redirect-url "Laboriosam magnam enim pariatur enim."` + "\n" +
		os.Args[0] + ` instagram register-url --api-key "Dolores et corporis quis consequatur et." --redirect-url "Autem iusto saepe aspernatur."` + "\n" +
		os.Args[0] + ` linkedin register-url --api-key "Dolores consequatur quia molestiae quia nostrum."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		monitoringFlags = flag.NewFlagSet("monitoring", flag.ContinueOnError)

		monitoringStatusFlags = flag.NewFlagSet("status", flag.ExitOnError)

		facebookFlags = flag.NewFlagSet("facebook", flag.ContinueOnError)

		facebookRegisterURLFlags      = flag.NewFlagSet("register-url", flag.ExitOnError)
		facebookRegisterURLAPIKeyFlag = facebookRegisterURLFlags.String("api-key", "", "")

		facebookAttachToAccountFlags             = flag.NewFlagSet("attach-to-account", flag.ExitOnError)
		facebookAttachToAccountAuthorizationFlag = facebookAttachToAccountFlags.String("authorization", "", "")
		facebookAttachToAccountXSessionFlag      = facebookAttachToAccountFlags.String("x-session", "", "")
		facebookAttachToAccountAPIKeyFlag        = facebookAttachToAccountFlags.String("api-key", "", "")

		facebookDetachFromAccountFlags             = flag.NewFlagSet("detach-from-account", flag.ExitOnError)
		facebookDetachFromAccountAuthorizationFlag = facebookDetachFromAccountFlags.String("authorization", "", "")
		facebookDetachFromAccountXSessionFlag      = facebookDetachFromAccountFlags.String("x-session", "", "")
		facebookDetachFromAccountAPIKeyFlag        = facebookDetachFromAccountFlags.String("api-key", "", "")

		facebookReceiveFlags             = flag.NewFlagSet("receive", flag.ExitOnError)
		facebookReceiveCodeFlag          = facebookReceiveFlags.String("code", "REQUIRED", "")
		facebookReceiveStateFlag         = facebookReceiveFlags.String("state", "REQUIRED", "")
		facebookReceiveAuthorizationFlag = facebookReceiveFlags.String("authorization", "", "")
		facebookReceiveXSessionFlag      = facebookReceiveFlags.String("x-session", "", "")
		facebookReceiveRedirectURLFlag   = facebookReceiveFlags.String("redirect-url", "", "")
		facebookReceiveAPIKeyFlag        = facebookReceiveFlags.String("api-key", "", "")

		googleFlags = flag.NewFlagSet("google", flag.ContinueOnError)

		googleRegisterURLFlags           = flag.NewFlagSet("register-url", flag.ExitOnError)
		googleRegisterURLAPIKeyFlag      = googleRegisterURLFlags.String("api-key", "", "")
		googleRegisterURLRedirectURLFlag = googleRegisterURLFlags.String("redirect-url", "", "")

		googleAttachToAccountFlags             = flag.NewFlagSet("attach-to-account", flag.ExitOnError)
		googleAttachToAccountAuthorizationFlag = googleAttachToAccountFlags.String("authorization", "", "")
		googleAttachToAccountXSessionFlag      = googleAttachToAccountFlags.String("x-session", "", "")
		googleAttachToAccountAPIKeyFlag        = googleAttachToAccountFlags.String("api-key", "", "")
		googleAttachToAccountRedirectURLFlag   = googleAttachToAccountFlags.String("redirect-url", "", "")

		googleDetachFromAccountFlags             = flag.NewFlagSet("detach-from-account", flag.ExitOnError)
		googleDetachFromAccountAuthorizationFlag = googleDetachFromAccountFlags.String("authorization", "", "")
		googleDetachFromAccountXSessionFlag      = googleDetachFromAccountFlags.String("x-session", "", "")
		googleDetachFromAccountAPIKeyFlag        = googleDetachFromAccountFlags.String("api-key", "", "")

		googleReceiveFlags             = flag.NewFlagSet("receive", flag.ExitOnError)
		googleReceiveCodeFlag          = googleReceiveFlags.String("code", "REQUIRED", "")
		googleReceiveStateFlag         = googleReceiveFlags.String("state", "REQUIRED", "")
		googleReceiveAuthorizationFlag = googleReceiveFlags.String("authorization", "", "")
		googleReceiveXSessionFlag      = googleReceiveFlags.String("x-session", "", "")
		googleReceiveRedirectURLFlag   = googleReceiveFlags.String("redirect-url", "", "")
		googleReceiveAPIKeyFlag        = googleReceiveFlags.String("api-key", "", "")

		instagramFlags = flag.NewFlagSet("instagram", flag.ContinueOnError)

		instagramRegisterURLFlags           = flag.NewFlagSet("register-url", flag.ExitOnError)
		instagramRegisterURLAPIKeyFlag      = instagramRegisterURLFlags.String("api-key", "", "")
		instagramRegisterURLRedirectURLFlag = instagramRegisterURLFlags.String("redirect-url", "", "")

		instagramAttachToAccountFlags             = flag.NewFlagSet("attach-to-account", flag.ExitOnError)
		instagramAttachToAccountAuthorizationFlag = instagramAttachToAccountFlags.String("authorization", "", "")
		instagramAttachToAccountXSessionFlag      = instagramAttachToAccountFlags.String("x-session", "", "")
		instagramAttachToAccountAPIKeyFlag        = instagramAttachToAccountFlags.String("api-key", "", "")
		instagramAttachToAccountRedirectURLFlag   = instagramAttachToAccountFlags.String("redirect-url", "", "")

		instagramDetachFromAccountFlags             = flag.NewFlagSet("detach-from-account", flag.ExitOnError)
		instagramDetachFromAccountAuthorizationFlag = instagramDetachFromAccountFlags.String("authorization", "", "")
		instagramDetachFromAccountXSessionFlag      = instagramDetachFromAccountFlags.String("x-session", "", "")
		instagramDetachFromAccountAPIKeyFlag        = instagramDetachFromAccountFlags.String("api-key", "", "")

		instagramReceiveFlags             = flag.NewFlagSet("receive", flag.ExitOnError)
		instagramReceiveCodeFlag          = instagramReceiveFlags.String("code", "REQUIRED", "")
		instagramReceiveStateFlag         = instagramReceiveFlags.String("state", "REQUIRED", "")
		instagramReceiveAuthorizationFlag = instagramReceiveFlags.String("authorization", "", "")
		instagramReceiveXSessionFlag      = instagramReceiveFlags.String("x-session", "", "")
		instagramReceiveRedirectURLFlag   = instagramReceiveFlags.String("redirect-url", "", "")
		instagramReceiveAPIKeyFlag        = instagramReceiveFlags.String("api-key", "", "")

		linkedinFlags = flag.NewFlagSet("linkedin", flag.ContinueOnError)

		linkedinRegisterURLFlags      = flag.NewFlagSet("register-url", flag.ExitOnError)
		linkedinRegisterURLAPIKeyFlag = linkedinRegisterURLFlags.String("api-key", "", "")

		linkedinAttachToAccountFlags             = flag.NewFlagSet("attach-to-account", flag.ExitOnError)
		linkedinAttachToAccountAuthorizationFlag = linkedinAttachToAccountFlags.String("authorization", "", "")
		linkedinAttachToAccountXSessionFlag      = linkedinAttachToAccountFlags.String("x-session", "", "")
		linkedinAttachToAccountAPIKeyFlag        = linkedinAttachToAccountFlags.String("api-key", "", "")

		linkedinDetachFromAccountFlags             = flag.NewFlagSet("detach-from-account", flag.ExitOnError)
		linkedinDetachFromAccountAuthorizationFlag = linkedinDetachFromAccountFlags.String("authorization", "", "")
		linkedinDetachFromAccountXSessionFlag      = linkedinDetachFromAccountFlags.String("x-session", "", "")
		linkedinDetachFromAccountAPIKeyFlag        = linkedinDetachFromAccountFlags.String("api-key", "", "")

		linkedinReceiveFlags             = flag.NewFlagSet("receive", flag.ExitOnError)
		linkedinReceiveCodeFlag          = linkedinReceiveFlags.String("code", "REQUIRED", "")
		linkedinReceiveStateFlag         = linkedinReceiveFlags.String("state", "REQUIRED", "")
		linkedinReceiveAuthorizationFlag = linkedinReceiveFlags.String("authorization", "", "")
		linkedinReceiveXSessionFlag      = linkedinReceiveFlags.String("x-session", "", "")
		linkedinReceiveRedirectURLFlag   = linkedinReceiveFlags.String("redirect-url", "", "")
		linkedinReceiveAPIKeyFlag        = linkedinReceiveFlags.String("api-key", "", "")

		passwordAuthFlags = flag.NewFlagSet("password-auth", flag.ContinueOnError)

		passwordAuthRegisterFlags             = flag.NewFlagSet("register", flag.ExitOnError)
		passwordAuthRegisterBodyFlag          = passwordAuthRegisterFlags.String("body", "REQUIRED", "")
		passwordAuthRegisterAuthorizationFlag = passwordAuthRegisterFlags.String("authorization", "", "")
		passwordAuthRegisterXSessionFlag      = passwordAuthRegisterFlags.String("x-session", "", "")
		passwordAuthRegisterAPIKeyFlag        = passwordAuthRegisterFlags.String("api-key", "", "")

		passwordAuthLoginFlags      = flag.NewFlagSet("login", flag.ExitOnError)
		passwordAuthLoginBodyFlag   = passwordAuthLoginFlags.String("body", "REQUIRED", "")
		passwordAuthLoginTokenFlag  = passwordAuthLoginFlags.String("token", "", "")
		passwordAuthLoginAPIKeyFlag = passwordAuthLoginFlags.String("api-key", "", "")

		passwordAuthRemoveFlags             = flag.NewFlagSet("remove", flag.ExitOnError)
		passwordAuthRemoveAuthorizationFlag = passwordAuthRemoveFlags.String("authorization", "", "")
		passwordAuthRemoveXSessionFlag      = passwordAuthRemoveFlags.String("x-session", "", "")
		passwordAuthRemoveAPIKeyFlag        = passwordAuthRemoveFlags.String("api-key", "", "")

		passwordAuthChangePasswordFlags             = flag.NewFlagSet("change-password", flag.ExitOnError)
		passwordAuthChangePasswordBodyFlag          = passwordAuthChangePasswordFlags.String("body", "REQUIRED", "")
		passwordAuthChangePasswordAuthorizationFlag = passwordAuthChangePasswordFlags.String("authorization", "REQUIRED", "")
		passwordAuthChangePasswordXSessionFlag      = passwordAuthChangePasswordFlags.String("x-session", "REQUIRED", "")
		passwordAuthChangePasswordAPIKeyFlag        = passwordAuthChangePasswordFlags.String("api-key", "", "")

		passwordAuthResetFlags      = flag.NewFlagSet("reset", flag.ExitOnError)
		passwordAuthResetEmailFlag  = passwordAuthResetFlags.String("email", "REQUIRED", "")
		passwordAuthResetAPIKeyFlag = passwordAuthResetFlags.String("api-key", "", "")

		passwordAuthConfirmResetFlags      = flag.NewFlagSet("confirm-reset", flag.ExitOnError)
		passwordAuthConfirmResetBodyFlag   = passwordAuthConfirmResetFlags.String("body", "REQUIRED", "")
		passwordAuthConfirmResetAPIKeyFlag = passwordAuthConfirmResetFlags.String("api-key", "", "")

		passwordAuthCheckEmailAvailableFlags      = flag.NewFlagSet("check-email-available", flag.ExitOnError)
		passwordAuthCheckEmailAvailableEmailFlag  = passwordAuthCheckEmailAvailableFlags.String("email", "", "")
		passwordAuthCheckEmailAvailableAPIKeyFlag = passwordAuthCheckEmailAvailableFlags.String("api-key", "", "")

		passwordAuthCheckPhoneAvailableFlags      = flag.NewFlagSet("check-phone-available", flag.ExitOnError)
		passwordAuthCheckPhoneAvailablePhoneFlag  = passwordAuthCheckPhoneAvailableFlags.String("phone", "", "")
		passwordAuthCheckPhoneAvailableAPIKeyFlag = passwordAuthCheckPhoneAvailableFlags.String("api-key", "", "")

		sessionFlags = flag.NewFlagSet("session", flag.ContinueOnError)

		sessionRefreshFlags        = flag.NewFlagSet("refresh", flag.ExitOnError)
		sessionRefreshXSessionFlag = sessionRefreshFlags.String("x-session", "REQUIRED", "")
		sessionRefreshAPIKeyFlag   = sessionRefreshFlags.String("api-key", "", "")

		sessionLogoutFlags             = flag.NewFlagSet("logout", flag.ExitOnError)
		sessionLogoutAuthorizationFlag = sessionLogoutFlags.String("authorization", "", "")
		sessionLogoutXSessionFlag      = sessionLogoutFlags.String("x-session", "", "")
		sessionLogoutAPIKeyFlag        = sessionLogoutFlags.String("api-key", "", "")

		sessionLogoutOtherFlags             = flag.NewFlagSet("logout-other", flag.ExitOnError)
		sessionLogoutOtherAuthorizationFlag = sessionLogoutOtherFlags.String("authorization", "", "")
		sessionLogoutOtherXSessionFlag      = sessionLogoutOtherFlags.String("x-session", "", "")
		sessionLogoutOtherAPIKeyFlag        = sessionLogoutOtherFlags.String("api-key", "", "")

		sessionLogoutSpecificFlags             = flag.NewFlagSet("logout-specific", flag.ExitOnError)
		sessionLogoutSpecificSessionIDFlag     = sessionLogoutSpecificFlags.String("session-id", "REQUIRED", "")
		sessionLogoutSpecificAuthorizationFlag = sessionLogoutSpecificFlags.String("authorization", "", "")
		sessionLogoutSpecificXSessionFlag      = sessionLogoutSpecificFlags.String("x-session", "", "")
		sessionLogoutSpecificAPIKeyFlag        = sessionLogoutSpecificFlags.String("api-key", "", "")

		sessionGetSessionsFlags             = flag.NewFlagSet("get-sessions", flag.ExitOnError)
		sessionGetSessionsAuthorizationFlag = sessionGetSessionsFlags.String("authorization", "", "")
		sessionGetSessionsXSessionFlag      = sessionGetSessionsFlags.String("x-session", "", "")
		sessionGetSessionsAPIKeyFlag        = sessionGetSessionsFlags.String("api-key", "", "")

		sessionRedeemTokenFlags      = flag.NewFlagSet("redeem-token", flag.ExitOnError)
		sessionRedeemTokenBodyFlag   = sessionRedeemTokenFlags.String("body", "REQUIRED", "")
		sessionRedeemTokenAPIKeyFlag = sessionRedeemTokenFlags.String("api-key", "", "")

		sessionCleanSessionsFlags             = flag.NewFlagSet("clean-sessions", flag.ExitOnError)
		sessionCleanSessionsAuthorizationFlag = sessionCleanSessionsFlags.String("authorization", "", "")
		sessionCleanSessionsXSessionFlag      = sessionCleanSessionsFlags.String("x-session", "", "")
		sessionCleanSessionsAPIKeyFlag        = sessionCleanSessionsFlags.String("api-key", "", "")

		sessionCleanLoginTokenFlags             = flag.NewFlagSet("clean-login-token", flag.ExitOnError)
		sessionCleanLoginTokenAuthorizationFlag = sessionCleanLoginTokenFlags.String("authorization", "", "")
		sessionCleanLoginTokenXSessionFlag      = sessionCleanLoginTokenFlags.String("x-session", "", "")
		sessionCleanLoginTokenAPIKeyFlag        = sessionCleanLoginTokenFlags.String("api-key", "", "")

		sessionCleanMergeTokenFlags             = flag.NewFlagSet("clean-merge-token", flag.ExitOnError)
		sessionCleanMergeTokenAuthorizationFlag = sessionCleanMergeTokenFlags.String("authorization", "", "")
		sessionCleanMergeTokenXSessionFlag      = sessionCleanMergeTokenFlags.String("x-session", "", "")
		sessionCleanMergeTokenAPIKeyFlag        = sessionCleanMergeTokenFlags.String("api-key", "", "")

		twitterFlags = flag.NewFlagSet("twitter", flag.ContinueOnError)

		twitterRegisterURLFlags      = flag.NewFlagSet("register-url", flag.ExitOnError)
		twitterRegisterURLAPIKeyFlag = twitterRegisterURLFlags.String("api-key", "", "")

		twitterAttachToAccountFlags             = flag.NewFlagSet("attach-to-account", flag.ExitOnError)
		twitterAttachToAccountAuthorizationFlag = twitterAttachToAccountFlags.String("authorization", "", "")
		twitterAttachToAccountXSessionFlag      = twitterAttachToAccountFlags.String("x-session", "", "")
		twitterAttachToAccountAPIKeyFlag        = twitterAttachToAccountFlags.String("api-key", "", "")

		twitterDetachFromAccountFlags             = flag.NewFlagSet("detach-from-account", flag.ExitOnError)
		twitterDetachFromAccountAuthorizationFlag = twitterDetachFromAccountFlags.String("authorization", "", "")
		twitterDetachFromAccountXSessionFlag      = twitterDetachFromAccountFlags.String("x-session", "", "")
		twitterDetachFromAccountAPIKeyFlag        = twitterDetachFromAccountFlags.String("api-key", "", "")

		twitterReceiveFlags             = flag.NewFlagSet("receive", flag.ExitOnError)
		twitterReceiveOauthTokenFlag    = twitterReceiveFlags.String("oauth-token", "REQUIRED", "")
		twitterReceiveOauthVerifierFlag = twitterReceiveFlags.String("oauth-verifier", "REQUIRED", "")
		twitterReceiveStateFlag         = twitterReceiveFlags.String("state", "REQUIRED", "")
		twitterReceiveAuthorizationFlag = twitterReceiveFlags.String("authorization", "", "")
		twitterReceiveXSessionFlag      = twitterReceiveFlags.String("x-session", "", "")
		twitterReceiveRedirectURLFlag   = twitterReceiveFlags.String("redirect-url", "", "")
		twitterReceiveAPIKeyFlag        = twitterReceiveFlags.String("api-key", "", "")

		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userGetAuthsFlags             = flag.NewFlagSet("get-auths", flag.ExitOnError)
		userGetAuthsUserIDFlag        = userGetAuthsFlags.String("user-id", "", "")
		userGetAuthsAuthorizationFlag = userGetAuthsFlags.String("authorization", "", "")
		userGetAuthsXSessionFlag      = userGetAuthsFlags.String("x-session", "", "")
		userGetAuthsAPIKeyFlag        = userGetAuthsFlags.String("api-key", "", "")

		userDeactivateFlags             = flag.NewFlagSet("deactivate", flag.ExitOnError)
		userDeactivateIDFlag            = userDeactivateFlags.String("id", "", "")
		userDeactivateAdminFlag         = userDeactivateFlags.String("admin", "", "")
		userDeactivateAuthorizationFlag = userDeactivateFlags.String("authorization", "", "")
		userDeactivateXSessionFlag      = userDeactivateFlags.String("x-session", "", "")
		userDeactivateAPIKeyFlag        = userDeactivateFlags.String("api-key", "", "")

		userGetUserFlags             = flag.NewFlagSet("get-user", flag.ExitOnError)
		userGetUserAuthorizationFlag = userGetUserFlags.String("authorization", "", "")
		userGetUserXSessionFlag      = userGetUserFlags.String("x-session", "", "")
		userGetUserAPIKeyFlag        = userGetUserFlags.String("api-key", "", "")

		userValidateEmailFlags          = flag.NewFlagSet("validate-email", flag.ExitOnError)
		userValidateEmailValidateIDFlag = userValidateEmailFlags.String("validate-id", "REQUIRED", "")
		userValidateEmailAPIKeyFlag     = userValidateEmailFlags.String("api-key", "", "")

		userUpdateUserFlags             = flag.NewFlagSet("update-user", flag.ExitOnError)
		userUpdateUserBodyFlag          = userUpdateUserFlags.String("body", "REQUIRED", "")
		userUpdateUserAuthorizationFlag = userUpdateUserFlags.String("authorization", "", "")
		userUpdateUserXSessionFlag      = userUpdateUserFlags.String("x-session", "", "")
		userUpdateUserAPIKeyFlag        = userUpdateUserFlags.String("api-key", "", "")

		userResendVerifyEmailFlags             = flag.NewFlagSet("resend-verify-email", flag.ExitOnError)
		userResendVerifyEmailAuthorizationFlag = userResendVerifyEmailFlags.String("authorization", "", "")
		userResendVerifyEmailXSessionFlag      = userResendVerifyEmailFlags.String("x-session", "", "")
		userResendVerifyEmailAPIKeyFlag        = userResendVerifyEmailFlags.String("api-key", "", "")

		userUpdatePhoneFlags             = flag.NewFlagSet("update-phone", flag.ExitOnError)
		userUpdatePhonePhoneFlag         = userUpdatePhoneFlags.String("phone", "", "")
		userUpdatePhoneCountryFlag       = userUpdatePhoneFlags.String("country", "", "")
		userUpdatePhoneAuthorizationFlag = userUpdatePhoneFlags.String("authorization", "", "")
		userUpdatePhoneXSessionFlag      = userUpdatePhoneFlags.String("x-session", "", "")
		userUpdatePhoneAPIKeyFlag        = userUpdatePhoneFlags.String("api-key", "", "")

		userResendOtpFlags             = flag.NewFlagSet("resend-otp", flag.ExitOnError)
		userResendOtpAuthorizationFlag = userResendOtpFlags.String("authorization", "", "")
		userResendOtpXSessionFlag      = userResendOtpFlags.String("x-session", "", "")
		userResendOtpAPIKeyFlag        = userResendOtpFlags.String("api-key", "", "")

		userVerifyPhoneFlags             = flag.NewFlagSet("verify-phone", flag.ExitOnError)
		userVerifyPhoneOtpFlag           = userVerifyPhoneFlags.String("otp", "", "")
		userVerifyPhoneAuthorizationFlag = userVerifyPhoneFlags.String("authorization", "", "")
		userVerifyPhoneXSessionFlag      = userVerifyPhoneFlags.String("x-session", "", "")
		userVerifyPhoneAPIKeyFlag        = userVerifyPhoneFlags.String("api-key", "", "")
	)
	monitoringFlags.Usage = monitoringUsage
	monitoringStatusFlags.Usage = monitoringStatusUsage

	facebookFlags.Usage = facebookUsage
	facebookRegisterURLFlags.Usage = facebookRegisterURLUsage
	facebookAttachToAccountFlags.Usage = facebookAttachToAccountUsage
	facebookDetachFromAccountFlags.Usage = facebookDetachFromAccountUsage
	facebookReceiveFlags.Usage = facebookReceiveUsage

	googleFlags.Usage = googleUsage
	googleRegisterURLFlags.Usage = googleRegisterURLUsage
	googleAttachToAccountFlags.Usage = googleAttachToAccountUsage
	googleDetachFromAccountFlags.Usage = googleDetachFromAccountUsage
	googleReceiveFlags.Usage = googleReceiveUsage

	instagramFlags.Usage = instagramUsage
	instagramRegisterURLFlags.Usage = instagramRegisterURLUsage
	instagramAttachToAccountFlags.Usage = instagramAttachToAccountUsage
	instagramDetachFromAccountFlags.Usage = instagramDetachFromAccountUsage
	instagramReceiveFlags.Usage = instagramReceiveUsage

	linkedinFlags.Usage = linkedinUsage
	linkedinRegisterURLFlags.Usage = linkedinRegisterURLUsage
	linkedinAttachToAccountFlags.Usage = linkedinAttachToAccountUsage
	linkedinDetachFromAccountFlags.Usage = linkedinDetachFromAccountUsage
	linkedinReceiveFlags.Usage = linkedinReceiveUsage

	passwordAuthFlags.Usage = passwordAuthUsage
	passwordAuthRegisterFlags.Usage = passwordAuthRegisterUsage
	passwordAuthLoginFlags.Usage = passwordAuthLoginUsage
	passwordAuthRemoveFlags.Usage = passwordAuthRemoveUsage
	passwordAuthChangePasswordFlags.Usage = passwordAuthChangePasswordUsage
	passwordAuthResetFlags.Usage = passwordAuthResetUsage
	passwordAuthConfirmResetFlags.Usage = passwordAuthConfirmResetUsage
	passwordAuthCheckEmailAvailableFlags.Usage = passwordAuthCheckEmailAvailableUsage
	passwordAuthCheckPhoneAvailableFlags.Usage = passwordAuthCheckPhoneAvailableUsage

	sessionFlags.Usage = sessionUsage
	sessionRefreshFlags.Usage = sessionRefreshUsage
	sessionLogoutFlags.Usage = sessionLogoutUsage
	sessionLogoutOtherFlags.Usage = sessionLogoutOtherUsage
	sessionLogoutSpecificFlags.Usage = sessionLogoutSpecificUsage
	sessionGetSessionsFlags.Usage = sessionGetSessionsUsage
	sessionRedeemTokenFlags.Usage = sessionRedeemTokenUsage
	sessionCleanSessionsFlags.Usage = sessionCleanSessionsUsage
	sessionCleanLoginTokenFlags.Usage = sessionCleanLoginTokenUsage
	sessionCleanMergeTokenFlags.Usage = sessionCleanMergeTokenUsage

	twitterFlags.Usage = twitterUsage
	twitterRegisterURLFlags.Usage = twitterRegisterURLUsage
	twitterAttachToAccountFlags.Usage = twitterAttachToAccountUsage
	twitterDetachFromAccountFlags.Usage = twitterDetachFromAccountUsage
	twitterReceiveFlags.Usage = twitterReceiveUsage

	userFlags.Usage = userUsage
	userGetAuthsFlags.Usage = userGetAuthsUsage
	userDeactivateFlags.Usage = userDeactivateUsage
	userGetUserFlags.Usage = userGetUserUsage
	userValidateEmailFlags.Usage = userValidateEmailUsage
	userUpdateUserFlags.Usage = userUpdateUserUsage
	userResendVerifyEmailFlags.Usage = userResendVerifyEmailUsage
	userUpdatePhoneFlags.Usage = userUpdatePhoneUsage
	userResendOtpFlags.Usage = userResendOtpUsage
	userVerifyPhoneFlags.Usage = userVerifyPhoneUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "monitoring":
			svcf = monitoringFlags
		case "facebook":
			svcf = facebookFlags
		case "google":
			svcf = googleFlags
		case "instagram":
			svcf = instagramFlags
		case "linkedin":
			svcf = linkedinFlags
		case "password-auth":
			svcf = passwordAuthFlags
		case "session":
			svcf = sessionFlags
		case "twitter":
			svcf = twitterFlags
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "monitoring":
			switch epn {
			case "status":
				epf = monitoringStatusFlags

			}

		case "facebook":
			switch epn {
			case "register-url":
				epf = facebookRegisterURLFlags

			case "attach-to-account":
				epf = facebookAttachToAccountFlags

			case "detach-from-account":
				epf = facebookDetachFromAccountFlags

			case "receive":
				epf = facebookReceiveFlags

			}

		case "google":
			switch epn {
			case "register-url":
				epf = googleRegisterURLFlags

			case "attach-to-account":
				epf = googleAttachToAccountFlags

			case "detach-from-account":
				epf = googleDetachFromAccountFlags

			case "receive":
				epf = googleReceiveFlags

			}

		case "instagram":
			switch epn {
			case "register-url":
				epf = instagramRegisterURLFlags

			case "attach-to-account":
				epf = instagramAttachToAccountFlags

			case "detach-from-account":
				epf = instagramDetachFromAccountFlags

			case "receive":
				epf = instagramReceiveFlags

			}

		case "linkedin":
			switch epn {
			case "register-url":
				epf = linkedinRegisterURLFlags

			case "attach-to-account":
				epf = linkedinAttachToAccountFlags

			case "detach-from-account":
				epf = linkedinDetachFromAccountFlags

			case "receive":
				epf = linkedinReceiveFlags

			}

		case "password-auth":
			switch epn {
			case "register":
				epf = passwordAuthRegisterFlags

			case "login":
				epf = passwordAuthLoginFlags

			case "remove":
				epf = passwordAuthRemoveFlags

			case "change-password":
				epf = passwordAuthChangePasswordFlags

			case "reset":
				epf = passwordAuthResetFlags

			case "confirm-reset":
				epf = passwordAuthConfirmResetFlags

			case "check-email-available":
				epf = passwordAuthCheckEmailAvailableFlags

			case "check-phone-available":
				epf = passwordAuthCheckPhoneAvailableFlags

			}

		case "session":
			switch epn {
			case "refresh":
				epf = sessionRefreshFlags

			case "logout":
				epf = sessionLogoutFlags

			case "logout-other":
				epf = sessionLogoutOtherFlags

			case "logout-specific":
				epf = sessionLogoutSpecificFlags

			case "get-sessions":
				epf = sessionGetSessionsFlags

			case "redeem-token":
				epf = sessionRedeemTokenFlags

			case "clean-sessions":
				epf = sessionCleanSessionsFlags

			case "clean-login-token":
				epf = sessionCleanLoginTokenFlags

			case "clean-merge-token":
				epf = sessionCleanMergeTokenFlags

			}

		case "twitter":
			switch epn {
			case "register-url":
				epf = twitterRegisterURLFlags

			case "attach-to-account":
				epf = twitterAttachToAccountFlags

			case "detach-from-account":
				epf = twitterDetachFromAccountFlags

			case "receive":
				epf = twitterReceiveFlags

			}

		case "user":
			switch epn {
			case "get-auths":
				epf = userGetAuthsFlags

			case "deactivate":
				epf = userDeactivateFlags

			case "get-user":
				epf = userGetUserFlags

			case "validate-email":
				epf = userValidateEmailFlags

			case "update-user":
				epf = userUpdateUserFlags

			case "resend-verify-email":
				epf = userResendVerifyEmailFlags

			case "update-phone":
				epf = userUpdatePhoneFlags

			case "resend-otp":
				epf = userResendOtpFlags

			case "verify-phone":
				epf = userVerifyPhoneFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "monitoring":
			c := monitoringc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "status":
				endpoint = c.Status()
				data = nil
			}
		case "facebook":
			c := facebookc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "register-url":
				endpoint = c.RegisterURL()
				data, err = facebookc.BuildRegisterURLPayload(*facebookRegisterURLAPIKeyFlag)
			case "attach-to-account":
				endpoint = c.AttachToAccount()
				data, err = facebookc.BuildAttachToAccountPayload(*facebookAttachToAccountAuthorizationFlag, *facebookAttachToAccountXSessionFlag, *facebookAttachToAccountAPIKeyFlag)
			case "detach-from-account":
				endpoint = c.DetachFromAccount()
				data, err = facebookc.BuildDetachFromAccountPayload(*facebookDetachFromAccountAuthorizationFlag, *facebookDetachFromAccountXSessionFlag, *facebookDetachFromAccountAPIKeyFlag)
			case "receive":
				endpoint = c.Receive()
				data, err = facebookc.BuildReceivePayload(*facebookReceiveCodeFlag, *facebookReceiveStateFlag, *facebookReceiveAuthorizationFlag, *facebookReceiveXSessionFlag, *facebookReceiveRedirectURLFlag, *facebookReceiveAPIKeyFlag)
			}
		case "google":
			c := googlec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "register-url":
				endpoint = c.RegisterURL()
				data, err = googlec.BuildRegisterURLPayload(*googleRegisterURLAPIKeyFlag, *googleRegisterURLRedirectURLFlag)
			case "attach-to-account":
				endpoint = c.AttachToAccount()
				data, err = googlec.BuildAttachToAccountPayload(*googleAttachToAccountAuthorizationFlag, *googleAttachToAccountXSessionFlag, *googleAttachToAccountAPIKeyFlag, *googleAttachToAccountRedirectURLFlag)
			case "detach-from-account":
				endpoint = c.DetachFromAccount()
				data, err = googlec.BuildDetachFromAccountPayload(*googleDetachFromAccountAuthorizationFlag, *googleDetachFromAccountXSessionFlag, *googleDetachFromAccountAPIKeyFlag)
			case "receive":
				endpoint = c.Receive()
				data, err = googlec.BuildReceivePayload(*googleReceiveCodeFlag, *googleReceiveStateFlag, *googleReceiveAuthorizationFlag, *googleReceiveXSessionFlag, *googleReceiveRedirectURLFlag, *googleReceiveAPIKeyFlag)
			}
		case "instagram":
			c := instagramc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "register-url":
				endpoint = c.RegisterURL()
				data, err = instagramc.BuildRegisterURLPayload(*instagramRegisterURLAPIKeyFlag, *instagramRegisterURLRedirectURLFlag)
			case "attach-to-account":
				endpoint = c.AttachToAccount()
				data, err = instagramc.BuildAttachToAccountPayload(*instagramAttachToAccountAuthorizationFlag, *instagramAttachToAccountXSessionFlag, *instagramAttachToAccountAPIKeyFlag, *instagramAttachToAccountRedirectURLFlag)
			case "detach-from-account":
				endpoint = c.DetachFromAccount()
				data, err = instagramc.BuildDetachFromAccountPayload(*instagramDetachFromAccountAuthorizationFlag, *instagramDetachFromAccountXSessionFlag, *instagramDetachFromAccountAPIKeyFlag)
			case "receive":
				endpoint = c.Receive()
				data, err = instagramc.BuildReceivePayload(*instagramReceiveCodeFlag, *instagramReceiveStateFlag, *instagramReceiveAuthorizationFlag, *instagramReceiveXSessionFlag, *instagramReceiveRedirectURLFlag, *instagramReceiveAPIKeyFlag)
			}
		case "linkedin":
			c := linkedinc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "register-url":
				endpoint = c.RegisterURL()
				data, err = linkedinc.BuildRegisterURLPayload(*linkedinRegisterURLAPIKeyFlag)
			case "attach-to-account":
				endpoint = c.AttachToAccount()
				data, err = linkedinc.BuildAttachToAccountPayload(*linkedinAttachToAccountAuthorizationFlag, *linkedinAttachToAccountXSessionFlag, *linkedinAttachToAccountAPIKeyFlag)
			case "detach-from-account":
				endpoint = c.DetachFromAccount()
				data, err = linkedinc.BuildDetachFromAccountPayload(*linkedinDetachFromAccountAuthorizationFlag, *linkedinDetachFromAccountXSessionFlag, *linkedinDetachFromAccountAPIKeyFlag)
			case "receive":
				endpoint = c.Receive()
				data, err = linkedinc.BuildReceivePayload(*linkedinReceiveCodeFlag, *linkedinReceiveStateFlag, *linkedinReceiveAuthorizationFlag, *linkedinReceiveXSessionFlag, *linkedinReceiveRedirectURLFlag, *linkedinReceiveAPIKeyFlag)
			}
		case "password-auth":
			c := passwordauthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "register":
				endpoint = c.Register()
				data, err = passwordauthc.BuildRegisterPayload(*passwordAuthRegisterBodyFlag, *passwordAuthRegisterAuthorizationFlag, *passwordAuthRegisterXSessionFlag, *passwordAuthRegisterAPIKeyFlag)
			case "login":
				endpoint = c.Login()
				data, err = passwordauthc.BuildLoginPayload(*passwordAuthLoginBodyFlag, *passwordAuthLoginTokenFlag, *passwordAuthLoginAPIKeyFlag)
			case "remove":
				endpoint = c.Remove()
				data, err = passwordauthc.BuildRemovePayload(*passwordAuthRemoveAuthorizationFlag, *passwordAuthRemoveXSessionFlag, *passwordAuthRemoveAPIKeyFlag)
			case "change-password":
				endpoint = c.ChangePassword()
				data, err = passwordauthc.BuildChangePasswordPayload(*passwordAuthChangePasswordBodyFlag, *passwordAuthChangePasswordAuthorizationFlag, *passwordAuthChangePasswordXSessionFlag, *passwordAuthChangePasswordAPIKeyFlag)
			case "reset":
				endpoint = c.Reset()
				data, err = passwordauthc.BuildResetPayload(*passwordAuthResetEmailFlag, *passwordAuthResetAPIKeyFlag)
			case "confirm-reset":
				endpoint = c.ConfirmReset()
				data, err = passwordauthc.BuildConfirmResetPayload(*passwordAuthConfirmResetBodyFlag, *passwordAuthConfirmResetAPIKeyFlag)
			case "check-email-available":
				endpoint = c.CheckEmailAvailable()
				data, err = passwordauthc.BuildCheckEmailAvailablePayload(*passwordAuthCheckEmailAvailableEmailFlag, *passwordAuthCheckEmailAvailableAPIKeyFlag)
			case "check-phone-available":
				endpoint = c.CheckPhoneAvailable()
				data, err = passwordauthc.BuildCheckPhoneAvailablePayload(*passwordAuthCheckPhoneAvailablePhoneFlag, *passwordAuthCheckPhoneAvailableAPIKeyFlag)
			}
		case "session":
			c := sessionc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "refresh":
				endpoint = c.Refresh()
				data, err = sessionc.BuildRefreshPayload(*sessionRefreshXSessionFlag, *sessionRefreshAPIKeyFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = sessionc.BuildLogoutPayload(*sessionLogoutAuthorizationFlag, *sessionLogoutXSessionFlag, *sessionLogoutAPIKeyFlag)
			case "logout-other":
				endpoint = c.LogoutOther()
				data, err = sessionc.BuildLogoutOtherPayload(*sessionLogoutOtherAuthorizationFlag, *sessionLogoutOtherXSessionFlag, *sessionLogoutOtherAPIKeyFlag)
			case "logout-specific":
				endpoint = c.LogoutSpecific()
				data, err = sessionc.BuildLogoutSpecificPayload(*sessionLogoutSpecificSessionIDFlag, *sessionLogoutSpecificAuthorizationFlag, *sessionLogoutSpecificXSessionFlag, *sessionLogoutSpecificAPIKeyFlag)
			case "get-sessions":
				endpoint = c.GetSessions()
				data, err = sessionc.BuildGetSessionsPayload(*sessionGetSessionsAuthorizationFlag, *sessionGetSessionsXSessionFlag, *sessionGetSessionsAPIKeyFlag)
			case "redeem-token":
				endpoint = c.RedeemToken()
				data, err = sessionc.BuildRedeemTokenPayload(*sessionRedeemTokenBodyFlag, *sessionRedeemTokenAPIKeyFlag)
			case "clean-sessions":
				endpoint = c.CleanSessions()
				data, err = sessionc.BuildCleanSessionsPayload(*sessionCleanSessionsAuthorizationFlag, *sessionCleanSessionsXSessionFlag, *sessionCleanSessionsAPIKeyFlag)
			case "clean-login-token":
				endpoint = c.CleanLoginToken()
				data, err = sessionc.BuildCleanLoginTokenPayload(*sessionCleanLoginTokenAuthorizationFlag, *sessionCleanLoginTokenXSessionFlag, *sessionCleanLoginTokenAPIKeyFlag)
			case "clean-merge-token":
				endpoint = c.CleanMergeToken()
				data, err = sessionc.BuildCleanMergeTokenPayload(*sessionCleanMergeTokenAuthorizationFlag, *sessionCleanMergeTokenXSessionFlag, *sessionCleanMergeTokenAPIKeyFlag)
			}
		case "twitter":
			c := twitterc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "register-url":
				endpoint = c.RegisterURL()
				data, err = twitterc.BuildRegisterURLPayload(*twitterRegisterURLAPIKeyFlag)
			case "attach-to-account":
				endpoint = c.AttachToAccount()
				data, err = twitterc.BuildAttachToAccountPayload(*twitterAttachToAccountAuthorizationFlag, *twitterAttachToAccountXSessionFlag, *twitterAttachToAccountAPIKeyFlag)
			case "detach-from-account":
				endpoint = c.DetachFromAccount()
				data, err = twitterc.BuildDetachFromAccountPayload(*twitterDetachFromAccountAuthorizationFlag, *twitterDetachFromAccountXSessionFlag, *twitterDetachFromAccountAPIKeyFlag)
			case "receive":
				endpoint = c.Receive()
				data, err = twitterc.BuildReceivePayload(*twitterReceiveOauthTokenFlag, *twitterReceiveOauthVerifierFlag, *twitterReceiveStateFlag, *twitterReceiveAuthorizationFlag, *twitterReceiveXSessionFlag, *twitterReceiveRedirectURLFlag, *twitterReceiveAPIKeyFlag)
			}
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-auths":
				endpoint = c.GetAuths()
				data, err = userc.BuildGetAuthsPayload(*userGetAuthsUserIDFlag, *userGetAuthsAuthorizationFlag, *userGetAuthsXSessionFlag, *userGetAuthsAPIKeyFlag)
			case "deactivate":
				endpoint = c.Deactivate()
				data, err = userc.BuildDeactivatePayload(*userDeactivateIDFlag, *userDeactivateAdminFlag, *userDeactivateAuthorizationFlag, *userDeactivateXSessionFlag, *userDeactivateAPIKeyFlag)
			case "get-user":
				endpoint = c.GetUser()
				data, err = userc.BuildGetUserPayload(*userGetUserAuthorizationFlag, *userGetUserXSessionFlag, *userGetUserAPIKeyFlag)
			case "validate-email":
				endpoint = c.ValidateEmail()
				data, err = userc.BuildValidateEmailPayload(*userValidateEmailValidateIDFlag, *userValidateEmailAPIKeyFlag)
			case "update-user":
				endpoint = c.UpdateUser()
				data, err = userc.BuildUpdateUserPayload(*userUpdateUserBodyFlag, *userUpdateUserAuthorizationFlag, *userUpdateUserXSessionFlag, *userUpdateUserAPIKeyFlag)
			case "resend-verify-email":
				endpoint = c.ResendVerifyEmail()
				data, err = userc.BuildResendVerifyEmailPayload(*userResendVerifyEmailAuthorizationFlag, *userResendVerifyEmailXSessionFlag, *userResendVerifyEmailAPIKeyFlag)
			case "update-phone":
				endpoint = c.UpdatePhone()
				data, err = userc.BuildUpdatePhonePayload(*userUpdatePhonePhoneFlag, *userUpdatePhoneCountryFlag, *userUpdatePhoneAuthorizationFlag, *userUpdatePhoneXSessionFlag, *userUpdatePhoneAPIKeyFlag)
			case "resend-otp":
				endpoint = c.ResendOtp()
				data, err = userc.BuildResendOtpPayload(*userResendOtpAuthorizationFlag, *userResendOtpXSessionFlag, *userResendOtpAPIKeyFlag)
			case "verify-phone":
				endpoint = c.VerifyPhone()
				data, err = userc.BuildVerifyPhonePayload(*userVerifyPhoneOtpFlag, *userVerifyPhoneAuthorizationFlag, *userVerifyPhoneXSessionFlag, *userVerifyPhoneAPIKeyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// monitoringUsage displays the usage of the monitoring command and its
// subcommands.
func monitoringUsage() {
	fmt.Fprintf(os.Stderr, `Service is the monitoring service interface.
Usage:
    %s [globalflags] monitoring COMMAND [flags]

COMMAND:
    status: Status implements status.

Additional help:
    %s monitoring COMMAND --help
`, os.Args[0], os.Args[0])
}
func monitoringStatusUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] monitoring status

Status implements status.

Example:
    `+os.Args[0]+` monitoring status
`, os.Args[0])
}

// facebookUsage displays the usage of the facebook command and its subcommands.
func facebookUsage() {
	fmt.Fprintf(os.Stderr, `Service is the facebook service interface.
Usage:
    %s [globalflags] facebook COMMAND [flags]

COMMAND:
    register-url: Gets the URL the front-end should redirect the browser to in order to be authenticated with Facebook, and then register
    attach-to-account: Attaches a Facebook account to an existing user account, returns the URL the browser should be redirected to
    detach-from-account: Detaches a Facebook account from an existing user account.
    receive: The endpoint that Facebook redirects the browser to after the user has authenticated

Additional help:
    %s facebook COMMAND --help
`, os.Args[0], os.Args[0])
}
func facebookRegisterURLUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] facebook register-url -api-key STRING

Gets the URL the front-end should redirect the browser to in order to be authenticated with Facebook, and then register
    -api-key STRING: 

Example:
    `+os.Args[0]+` facebook register-url --api-key "Et aliquid amet voluptas."
`, os.Args[0])
}

func facebookAttachToAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] facebook attach-to-account -authorization STRING -x-session STRING -api-key STRING

Attaches a Facebook account to an existing user account, returns the URL the browser should be redirected to
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` facebook attach-to-account --authorization "Laboriosam dolorum." --x-session "Laudantium alias aut eius." --api-key "Hic illum perferendis."
`, os.Args[0])
}

func facebookDetachFromAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] facebook detach-from-account -authorization STRING -x-session STRING -api-key STRING

Detaches a Facebook account from an existing user account.
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` facebook detach-from-account --authorization "Saepe ad." --x-session "Quidem temporibus aut." --api-key "Ratione dolor maxime."
`, os.Args[0])
}

func facebookReceiveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] facebook receive -code STRING -state STRING -authorization STRING -x-session STRING -redirect-url STRING -api-key STRING

The endpoint that Facebook redirects the browser to after the user has authenticated
    -code STRING: 
    -state STRING: 
    -authorization STRING: 
    -x-session STRING: 
    -redirect-url STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` facebook receive --code "Ratione ut et sit officia." --state "FB1E8AC6-4FA4-C883-ED5A-54960E88F5FE" --authorization "Unde inventore in praesentium voluptas." --x-session "Vero aliquam excepturi." --redirect-url "Ut maxime possimus illo est." --api-key "Qui quod totam facere minima voluptatem."
`, os.Args[0])
}

// googleUsage displays the usage of the google command and its subcommands.
func googleUsage() {
	fmt.Fprintf(os.Stderr, `Service is the google service interface.
Usage:
    %s [globalflags] google COMMAND [flags]

COMMAND:
    register-url: Gets the URL the front-end should redirect the browser to in order to be authenticated with Google, and then register
    attach-to-account: Attaches a Google account to an existing user account, returns the URL the browser should be redirected to
    detach-from-account: Detaches a Google account from an existing user account.
    receive: The endpoint that Google redirects the browser to after the user has authenticated

Additional help:
    %s google COMMAND --help
`, os.Args[0], os.Args[0])
}
func googleRegisterURLUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] google register-url -api-key STRING -redirect-url STRING

Gets the URL the front-end should redirect the browser to in order to be authenticated with Google, and then register
    -api-key STRING: 
    -redirect-url STRING: 

Example:
    `+os.Args[0]+` google register-url --api-key "Officia recusandae ex debitis accusamus ducimus soluta." --redirect-url "Laboriosam magnam enim pariatur enim."
`, os.Args[0])
}

func googleAttachToAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] google attach-to-account -authorization STRING -x-session STRING -api-key STRING -redirect-url STRING

Attaches a Google account to an existing user account, returns the URL the browser should be redirected to
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 
    -redirect-url STRING: 

Example:
    `+os.Args[0]+` google attach-to-account --authorization "Sapiente assumenda quasi nihil." --x-session "Voluptas quo ut iure." --api-key "Fuga iste et." --redirect-url "Vel dolores perspiciatis et."
`, os.Args[0])
}

func googleDetachFromAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] google detach-from-account -authorization STRING -x-session STRING -api-key STRING

Detaches a Google account from an existing user account.
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` google detach-from-account --authorization "Assumenda rerum eaque tempore est." --x-session "Id qui dolorum saepe." --api-key "Sit voluptates cum."
`, os.Args[0])
}

func googleReceiveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] google receive -code STRING -state STRING -authorization STRING -x-session STRING -redirect-url STRING -api-key STRING

The endpoint that Google redirects the browser to after the user has authenticated
    -code STRING: 
    -state STRING: 
    -authorization STRING: 
    -x-session STRING: 
    -redirect-url STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` google receive --code "Deleniti incidunt eius." --state "7D80331A-7620-D09D-7CCB-2EF87B797732" --authorization "Rerum qui ratione." --x-session "Deserunt ut perspiciatis architecto tempora." --redirect-url "Omnis quia beatae laborum consequatur beatae quae." --api-key "Impedit error excepturi."
`, os.Args[0])
}

// instagramUsage displays the usage of the instagram command and its
// subcommands.
func instagramUsage() {
	fmt.Fprintf(os.Stderr, `Service is the instagram service interface.
Usage:
    %s [globalflags] instagram COMMAND [flags]

COMMAND:
    register-url: Gets the URL the front-end should redirect the browser to in order to be authenticated with Instagram, and then register
    attach-to-account: Attaches a Instagram account to an existing user account, returns the URL the browser should be redirected to
    detach-from-account: Detaches a Instagram account from an existing user account.
    receive: The endpoint that Instagram redirects the browser to after the user has authenticated

Additional help:
    %s instagram COMMAND --help
`, os.Args[0], os.Args[0])
}
func instagramRegisterURLUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] instagram register-url -api-key STRING -redirect-url STRING

Gets the URL the front-end should redirect the browser to in order to be authenticated with Instagram, and then register
    -api-key STRING: 
    -redirect-url STRING: 

Example:
    `+os.Args[0]+` instagram register-url --api-key "Dolores et corporis quis consequatur et." --redirect-url "Autem iusto saepe aspernatur."
`, os.Args[0])
}

func instagramAttachToAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] instagram attach-to-account -authorization STRING -x-session STRING -api-key STRING -redirect-url STRING

Attaches a Instagram account to an existing user account, returns the URL the browser should be redirected to
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 
    -redirect-url STRING: 

Example:
    `+os.Args[0]+` instagram attach-to-account --authorization "Sit nam." --x-session "Rerum accusantium sunt et." --api-key "Soluta totam." --redirect-url "Fuga suscipit et."
`, os.Args[0])
}

func instagramDetachFromAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] instagram detach-from-account -authorization STRING -x-session STRING -api-key STRING

Detaches a Instagram account from an existing user account.
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` instagram detach-from-account --authorization "Quia qui ab quidem velit dolores." --x-session "Nulla laudantium." --api-key "Et laboriosam officiis voluptatem porro."
`, os.Args[0])
}

func instagramReceiveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] instagram receive -code STRING -state STRING -authorization STRING -x-session STRING -redirect-url STRING -api-key STRING

The endpoint that Instagram redirects the browser to after the user has authenticated
    -code STRING: 
    -state STRING: 
    -authorization STRING: 
    -x-session STRING: 
    -redirect-url STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` instagram receive --code "Quia excepturi vel est nihil quod et." --state "76FB876C-96AC-91E7-BD21-B0C2988DDF65" --authorization "Consequatur nobis officia adipisci repellendus nihil." --x-session "Minima dolore qui provident commodi." --redirect-url "Aut consequatur et." --api-key "Molestiae et dolor quidem."
`, os.Args[0])
}

// linkedinUsage displays the usage of the linkedin command and its subcommands.
func linkedinUsage() {
	fmt.Fprintf(os.Stderr, `Service is the linkedin service interface.
Usage:
    %s [globalflags] linkedin COMMAND [flags]

COMMAND:
    register-url: Gets the URL the front-end should redirect the browser to in order to be authenticated with Linkedin, and then register
    attach-to-account: Attaches a Linkedin account to an existing user account, returns the URL the browser should be redirected to
    detach-from-account: Detaches a Linkedin account from an existing user account.
    receive: The endpoint that Linkedin redirects the browser to after the user has authenticated

Additional help:
    %s linkedin COMMAND --help
`, os.Args[0], os.Args[0])
}
func linkedinRegisterURLUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] linkedin register-url -api-key STRING

Gets the URL the front-end should redirect the browser to in order to be authenticated with Linkedin, and then register
    -api-key STRING: 

Example:
    `+os.Args[0]+` linkedin register-url --api-key "Dolores consequatur quia molestiae quia nostrum."
`, os.Args[0])
}

func linkedinAttachToAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] linkedin attach-to-account -authorization STRING -x-session STRING -api-key STRING

Attaches a Linkedin account to an existing user account, returns the URL the browser should be redirected to
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` linkedin attach-to-account --authorization "Et molestias beatae vitae." --x-session "Architecto autem." --api-key "Laboriosam distinctio accusamus deleniti iusto."
`, os.Args[0])
}

func linkedinDetachFromAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] linkedin detach-from-account -authorization STRING -x-session STRING -api-key STRING

Detaches a Linkedin account from an existing user account.
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` linkedin detach-from-account --authorization "Sint in et." --x-session "Cumque mollitia fuga recusandae illo." --api-key "Perspiciatis unde."
`, os.Args[0])
}

func linkedinReceiveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] linkedin receive -code STRING -state STRING -authorization STRING -x-session STRING -redirect-url STRING -api-key STRING

The endpoint that Linkedin redirects the browser to after the user has authenticated
    -code STRING: 
    -state STRING: 
    -authorization STRING: 
    -x-session STRING: 
    -redirect-url STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` linkedin receive --code "Velit rem magni soluta qui voluptas quam." --state "A45D83CF-F038-77BB-220E-D79EFC31D198" --authorization "Harum maxime dolores magnam harum earum." --x-session "Debitis hic quo odit eligendi ut neque." --redirect-url "Praesentium quas." --api-key "Similique dolorum qui sit ratione."
`, os.Args[0])
}

// password-authUsage displays the usage of the password-auth command and its
// subcommands.
func passwordAuthUsage() {
	fmt.Fprintf(os.Stderr, `Service is the password-auth service interface.
Usage:
    %s [globalflags] password-auth COMMAND [flags]

COMMAND:
    register: Register a new user with an email and password
    login: Login a user using an email and password
    remove: Removes using a password as a login method
    change-password: Changes the user's current password to a new one, also adds a password to the account if there is none
    reset: Send an email to user to get a password reset, responds with no content even if the email is not on any user account
    confirm-reset: Confirms that a reset has been completed and changes the password to the new one passed in
    check-email-available: Checks if an email is available for signup
    check-phone-available: Checks if an phone is available for signup

Additional help:
    %s password-auth COMMAND --help
`, os.Args[0], os.Args[0])
}
func passwordAuthRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] password-auth register -body JSON -authorization STRING -x-session STRING -api-key STRING

Register a new user with an email and password
    -body JSON: 
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` password-auth register --body '{
      "email": "julius@rolfson.com",
      "firstName": "ol",
      "gRecaptchaResponse": "Nostrum sed eaque esse in.",
      "lastName": "6vg",
      "password": "rta",
      "phone": "Aut sunt voluptatem laboriosam ex voluptatem."
   }' --authorization "Tempora non repudiandae." --x-session "Eligendi dolorem commodi quis eos nobis dolorem." --api-key "Aut quis libero."
`, os.Args[0])
}

func passwordAuthLoginUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] password-auth login -body JSON -token STRING -api-key STRING

Login a user using an email and password
    -body JSON: 
    -token STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` password-auth login --body '{
      "TwoFactor": "lqw",
      "email": "kody_dooley@lebsack.name",
      "password": "jru"
   }' --token "0C589E55-99C1-3ED8-809A-1463C91242B6" --api-key "Fugiat in sunt error quod quia earum."
`, os.Args[0])
}

func passwordAuthRemoveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] password-auth remove -authorization STRING -x-session STRING -api-key STRING

Removes using a password as a login method
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` password-auth remove --authorization "Consectetur dolor deserunt libero molestiae expedita voluptatem." --x-session "Sapiente nobis voluptatem dolorem reprehenderit minima quas." --api-key "Qui sed voluptatibus quo sit."
`, os.Args[0])
}

func passwordAuthChangePasswordUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] password-auth change-password -body JSON -authorization STRING -x-session STRING -api-key STRING

Changes the user's current password to a new one, also adds a password to the account if there is none
    -body JSON: 
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` password-auth change-password --body '{
      "newPassword": "0gq",
      "oldPassword": "v2m"
   }' --authorization "Fugiat rerum corrupti quae praesentium itaque similique." --x-session "Et dolores sed est vel." --api-key "Quos saepe quia."
`, os.Args[0])
}

func passwordAuthResetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] password-auth reset -email STRING -api-key STRING

Send an email to user to get a password reset, responds with no content even if the email is not on any user account
    -email STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` password-auth reset --email "bella.gorczany@halvorsonfeeney.name" --api-key "Officia velit aliquid voluptas consequuntur sed incidunt."
`, os.Args[0])
}

func passwordAuthConfirmResetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] password-auth confirm-reset -body JSON -api-key STRING

Confirms that a reset has been completed and changes the password to the new one passed in
    -body JSON: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` password-auth confirm-reset --body '{
      "newPassword": "xj1",
      "resetCode": "Exercitationem porro autem aut.",
      "userID": "Corrupti dolore facilis iure et."
   }' --api-key "Eligendi tempora natus qui eveniet."
`, os.Args[0])
}

func passwordAuthCheckEmailAvailableUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] password-auth check-email-available -email STRING -api-key STRING

Checks if an email is available for signup
    -email STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` password-auth check-email-available --email "Omnis ea." --api-key "Rem molestias totam nisi libero voluptatem aut."
`, os.Args[0])
}

func passwordAuthCheckPhoneAvailableUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] password-auth check-phone-available -phone STRING -api-key STRING

Checks if an phone is available for signup
    -phone STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` password-auth check-phone-available --phone "Dolore ipsum." --api-key "Ut voluptatem voluptatibus et quo."
`, os.Args[0])
}

// sessionUsage displays the usage of the session command and its subcommands.
func sessionUsage() {
	fmt.Fprintf(os.Stderr, `Service is the session service interface.
Usage:
    %s [globalflags] session COMMAND [flags]

COMMAND:
    refresh: Take a user's session token and refresh it, also returns a new authentication token
    logout: Takes a user's auth token, and logs-out the session associated with it
    logout-other: Logout all sessions for the current user except their current session
    logout-specific: Logout of a specific session
    get-sessions: Gets all of the sessions that are associated with the currently logged in user
    redeem-token: Redeems a login token for credentials
    clean-sessions: Deletes all the sessions that have expired
    clean-login-token: Cleans old login tokens from the database
    clean-merge-token: Cleans old account merge tokens from the database

Additional help:
    %s session COMMAND --help
`, os.Args[0], os.Args[0])
}
func sessionRefreshUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] session refresh -x-session STRING -api-key STRING

Take a user's session token and refresh it, also returns a new authentication token
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` session refresh --x-session "Ut et aut repellendus dicta ex dolorum." --api-key "Nostrum aliquid."
`, os.Args[0])
}

func sessionLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] session logout -authorization STRING -x-session STRING -api-key STRING

Takes a user's auth token, and logs-out the session associated with it
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` session logout --authorization "Necessitatibus suscipit." --x-session "Eius doloribus quis praesentium ut." --api-key "Doloremque quasi tempore et quos."
`, os.Args[0])
}

func sessionLogoutOtherUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] session logout-other -authorization STRING -x-session STRING -api-key STRING

Logout all sessions for the current user except their current session
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` session logout-other --authorization "Doloremque eum." --x-session "Recusandae atque." --api-key "Fuga sunt dolorem nihil quisquam rerum."
`, os.Args[0])
}

func sessionLogoutSpecificUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] session logout-specific -session-id STRING -authorization STRING -x-session STRING -api-key STRING

Logout of a specific session
    -session-id STRING: 
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` session logout-specific --session-id "Expedita velit ducimus sed maxime et dolorem." --authorization "In ut nihil." --x-session "Ullam accusantium ab et quas qui dolorum." --api-key "Impedit quam odit vero."
`, os.Args[0])
}

func sessionGetSessionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] session get-sessions -authorization STRING -x-session STRING -api-key STRING

Gets all of the sessions that are associated with the currently logged in user
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` session get-sessions --authorization "Consectetur placeat illum." --x-session "Adipisci reiciendis." --api-key "Possimus voluptates quis occaecati ad eum porro."
`, os.Args[0])
}

func sessionRedeemTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] session redeem-token -body JSON -api-key STRING

Redeems a login token for credentials
    -body JSON: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` session redeem-token --body '{
      "User-Agent": "Quasi dolor fugit id beatae.",
      "token": "A8E7C55C-B3EA-B228-EF84-9DB3D55D57A4"
   }' --api-key "Eos id officia delectus."
`, os.Args[0])
}

func sessionCleanSessionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] session clean-sessions -authorization STRING -x-session STRING -api-key STRING

Deletes all the sessions that have expired
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` session clean-sessions --authorization "Incidunt asperiores." --x-session "In cumque quo et odio aliquam quo." --api-key "Ipsam sequi."
`, os.Args[0])
}

func sessionCleanLoginTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] session clean-login-token -authorization STRING -x-session STRING -api-key STRING

Cleans old login tokens from the database
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` session clean-login-token --authorization "Nihil est sapiente accusantium at." --x-session "Nobis ducimus corrupti voluptatem quo assumenda." --api-key "Quis ut."
`, os.Args[0])
}

func sessionCleanMergeTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] session clean-merge-token -authorization STRING -x-session STRING -api-key STRING

Cleans old account merge tokens from the database
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` session clean-merge-token --authorization "Dolores et incidunt saepe dolor omnis." --x-session "Ea nesciunt et excepturi vero est pariatur." --api-key "Quis facilis est autem libero tempora possimus."
`, os.Args[0])
}

// twitterUsage displays the usage of the twitter command and its subcommands.
func twitterUsage() {
	fmt.Fprintf(os.Stderr, `Service is the twitter service interface.
Usage:
    %s [globalflags] twitter COMMAND [flags]

COMMAND:
    register-url: Gets the URL the front-end should redirect the browser to in order to be authenticated with Twitter, and then register
    attach-to-account: Attaches a Twitter account to an existing user account, returns the URL the browser should be redirected to
    detach-from-account: Detaches a Twitter account from an existing user account.
    receive: The endpoint that Twitter redirects the browser to after the user has authenticated

Additional help:
    %s twitter COMMAND --help
`, os.Args[0], os.Args[0])
}
func twitterRegisterURLUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] twitter register-url -api-key STRING

Gets the URL the front-end should redirect the browser to in order to be authenticated with Twitter, and then register
    -api-key STRING: 

Example:
    `+os.Args[0]+` twitter register-url --api-key "Beatae mollitia placeat enim nemo consequatur occaecati."
`, os.Args[0])
}

func twitterAttachToAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] twitter attach-to-account -authorization STRING -x-session STRING -api-key STRING

Attaches a Twitter account to an existing user account, returns the URL the browser should be redirected to
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` twitter attach-to-account --authorization "Inventore voluptates nobis eius." --x-session "Corrupti omnis molestiae." --api-key "Qui est animi qui consequuntur."
`, os.Args[0])
}

func twitterDetachFromAccountUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] twitter detach-from-account -authorization STRING -x-session STRING -api-key STRING

Detaches a Twitter account from an existing user account.
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` twitter detach-from-account --authorization "Aut atque voluptates qui magnam." --x-session "Repellat harum." --api-key "Quibusdam doloremque aut officia molestias."
`, os.Args[0])
}

func twitterReceiveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] twitter receive -oauth-token STRING -oauth-verifier STRING -state STRING -authorization STRING -x-session STRING -redirect-url STRING -api-key STRING

The endpoint that Twitter redirects the browser to after the user has authenticated
    -oauth-token STRING: 
    -oauth-verifier STRING: 
    -state STRING: 
    -authorization STRING: 
    -x-session STRING: 
    -redirect-url STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` twitter receive --oauth-token "Ea dolor." --oauth-verifier "Voluptate asperiores harum incidunt." --state "1576BB1F-D21C-05AD-6677-73725A387FA6" --authorization "Vel eum aspernatur." --x-session "Quis a velit eum." --redirect-url "Culpa illo tempore voluptas nihil." --api-key "Molestiae culpa et soluta qui."
`, os.Args[0])
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `Service is the user service interface.
Usage:
    %s [globalflags] user COMMAND [flags]

COMMAND:
    get-auths: Returns whether Oauth is attached or not
    deactivate: Disable a user's account
    get-user: Get a user's details
    validate-email: Validates an email address, designed to be called by users directly in their browser
    update-user: Update a user
    resend-verify-email: Resends a verify email for the current user, also invalidates the link on the previously send email verification
    update-phone: Update Phone and send an OTP to entered phone for verification
    resend-otp: Resend otp for phone verification
    verify-phone: Verify phone with entered phone

Additional help:
    %s user COMMAND --help
`, os.Args[0], os.Args[0])
}
func userGetAuthsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get-auths -user-id STRING -authorization STRING -x-session STRING -api-key STRING

Returns whether Oauth is attached or not
    -user-id STRING: 
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` user get-auths --user-id "Consectetur saepe voluptatem." --authorization "Hic amet quidem quis." --x-session "Explicabo exercitationem rerum amet temporibus." --api-key "Et ea."
`, os.Args[0])
}

func userDeactivateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user deactivate -id STRING -admin STRING -authorization STRING -x-session STRING -api-key STRING

Disable a user's account
    -id STRING: 
    -admin STRING: 
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` user deactivate --id "Aspernatur in." --admin "Excepturi qui est consequatur aliquam sapiente rerum." --authorization "Quia earum ipsa." --x-session "Est culpa corrupti autem qui ipsa est." --api-key "Aspernatur exercitationem rerum facere id dignissimos."
`, os.Args[0])
}

func userGetUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get-user -authorization STRING -x-session STRING -api-key STRING

Get a user's details
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` user get-user --authorization "Est sapiente tenetur iure et." --x-session "Et sed minima perferendis." --api-key "Corporis cumque porro modi ratione."
`, os.Args[0])
}

func userValidateEmailUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user validate-email -validate-id STRING -api-key STRING

Validates an email address, designed to be called by users directly in their browser
    -validate-id STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` user validate-email --validate-id "Dolorum ipsa dignissimos vitae ut iste." --api-key "Qui et voluptatum dicta."
`, os.Args[0])
}

func userUpdateUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user update-user -body JSON -authorization STRING -x-session STRING -api-key STRING

Update a user
    -body JSON: 
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` user update-user --body '{
      "changingEmail": "Iure sequi magnam necessitatibus vel quis.",
      "countryPhoneCode": "Qui numquam.",
      "email": "Aperiam fuga a eum iste officiis blanditiis.",
      "firstName": "Jeff",
      "isAdmin": false,
      "lastName": "Newmann",
      "phone": "Distinctio aperiam.",
      "verifiedEmail": true
   }' --authorization "Aut qui laborum." --x-session "Omnis nam qui consequuntur nostrum minima." --api-key "Quia enim et necessitatibus repudiandae."
`, os.Args[0])
}

func userResendVerifyEmailUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user resend-verify-email -authorization STRING -x-session STRING -api-key STRING

Resends a verify email for the current user, also invalidates the link on the previously send email verification
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` user resend-verify-email --authorization "Ipsam provident qui inventore." --x-session "Et quia non quae." --api-key "Quo adipisci voluptas sunt."
`, os.Args[0])
}

func userUpdatePhoneUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user update-phone -phone STRING -country STRING -authorization STRING -x-session STRING -api-key STRING

Update Phone and send an OTP to entered phone for verification
    -phone STRING: 
    -country STRING: 
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` user update-phone --phone "Sequi voluptatem soluta qui sit et." --country "Dicta dolorem omnis amet eligendi." --authorization "Officiis ut vel sed in." --x-session "Eos maxime ut." --api-key "Necessitatibus incidunt asperiores reiciendis est consequatur."
`, os.Args[0])
}

func userResendOtpUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user resend-otp -authorization STRING -x-session STRING -api-key STRING

Resend otp for phone verification
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` user resend-otp --authorization "Nostrum iste officiis praesentium." --x-session "Eum voluptatem adipisci facilis ab repudiandae." --api-key "Rerum possimus officia."
`, os.Args[0])
}

func userVerifyPhoneUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user verify-phone -otp STRING -authorization STRING -x-session STRING -api-key STRING

Verify phone with entered phone
    -otp STRING: 
    -authorization STRING: 
    -x-session STRING: 
    -api-key STRING: 

Example:
    `+os.Args[0]+` user verify-phone --otp "Minima labore molestias nesciunt ad sed tenetur." --authorization "In quia consectetur tenetur autem aliquam." --x-session "Harum illum eos unde et et." --api-key "Dolor quod non nobis."
`, os.Args[0])
}
