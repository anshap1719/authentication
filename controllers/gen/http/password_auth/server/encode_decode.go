// Code generated by goa v3.0.6, DO NOT EDIT.
//
// password-auth HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package server

import (
	"context"
	"io"
	"net/http"
	"strings"

	passwordauthviews "github.com/anshap1719/authentication/controllers/gen/password_auth/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeRegisterResponse returns an encoder for responses returned by the
// password-auth register endpoint.
func EncodeRegisterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*passwordauthviews.UserMedia)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewRegisterResponseBody(res.Projected)
		if res.Projected.Authorization != nil {
			w.Header().Set("Authorization", *res.Projected.Authorization)
		}
		if res.Projected.XSession != nil {
			w.Header().Set("X-Session", *res.Projected.XSession)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRegisterRequest returns a decoder for requests sent to the
// password-auth register endpoint.
func DecodeRegisterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RegisterRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateRegisterRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			authorization *string
			xSession      *string
			aPIKey        *string
		)
		authorizationRaw := r.Header.Get("Authorization")
		if authorizationRaw != "" {
			authorization = &authorizationRaw
		}
		xSessionRaw := r.Header.Get("X-Session")
		if xSessionRaw != "" {
			xSession = &xSessionRaw
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewRegisterParams(&body, authorization, xSession, aPIKey)

		return payload, nil
	}
}

// EncodeLoginResponse returns an encoder for responses returned by the
// password-auth login endpoint.
func EncodeLoginResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*passwordauthviews.UserMedia)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewLoginResponseBody(res.Projected)
		if res.Projected.Authorization != nil {
			w.Header().Set("Authorization", *res.Projected.Authorization)
		}
		if res.Projected.XSession != nil {
			w.Header().Set("X-Session", *res.Projected.XSession)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeLoginRequest returns a decoder for requests sent to the password-auth
// login endpoint.
func DecodeLoginRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body LoginRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateLoginRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			token  *string
			aPIKey *string
		)
		tokenRaw := r.URL.Query().Get("token")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if token != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("token", *token, goa.FormatUUID))
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewLoginParams(&body, token, aPIKey)

		return payload, nil
	}
}

// EncodeRemoveResponse returns an encoder for responses returned by the
// password-auth remove endpoint.
func EncodeRemoveResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeRemoveRequest returns a decoder for requests sent to the password-auth
// remove endpoint.
func DecodeRemoveRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			authorization *string
			xSession      *string
			aPIKey        *string
		)
		authorizationRaw := r.Header.Get("Authorization")
		if authorizationRaw != "" {
			authorization = &authorizationRaw
		}
		xSessionRaw := r.Header.Get("X-Session")
		if xSessionRaw != "" {
			xSession = &xSessionRaw
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewRemovePayload(authorization, xSession, aPIKey)
		if payload.Authorization != nil {
			if strings.Contains(*payload.Authorization, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Authorization, " ", 2)[1]
				payload.Authorization = &cred
			}
		}

		return payload, nil
	}
}

// EncodeChangePasswordResponse returns an encoder for responses returned by
// the password-auth change-password endpoint.
func EncodeChangePasswordResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeChangePasswordRequest returns a decoder for requests sent to the
// password-auth change-password endpoint.
func DecodeChangePasswordRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ChangePasswordRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateChangePasswordRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			authorization string
			xSession      string
			aPIKey        *string
		)
		authorization = r.Header.Get("Authorization")
		if authorization == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		xSession = r.Header.Get("X-Session")
		if xSession == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-Session", "header"))
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewChangePasswordParams(&body, authorization, xSession, aPIKey)
		if strings.Contains(payload.Authorization, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Authorization, " ", 2)[1]
			payload.Authorization = cred
		}

		return payload, nil
	}
}

// EncodeResetResponse returns an encoder for responses returned by the
// password-auth reset endpoint.
func EncodeResetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeResetRequest returns a decoder for requests sent to the password-auth
// reset endpoint.
func DecodeResetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			email  string
			aPIKey *string
			err    error
		)
		email = r.URL.Query().Get("email")
		if email == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("email", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("email", email, goa.FormatEmail))

		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewResetPayload(email, aPIKey)

		return payload, nil
	}
}

// EncodeConfirmResetResponse returns an encoder for responses returned by the
// password-auth confirm-reset endpoint.
func EncodeConfirmResetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeConfirmResetRequest returns a decoder for requests sent to the
// password-auth confirm-reset endpoint.
func DecodeConfirmResetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ConfirmResetRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateConfirmResetRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			aPIKey *string
		)
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewConfirmResetResetPasswordParams(&body, aPIKey)

		return payload, nil
	}
}

// EncodeCheckEmailAvailableResponse returns an encoder for responses returned
// by the password-auth check-email-available endpoint.
func EncodeCheckEmailAvailableResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(bool)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCheckEmailAvailableRequest returns a decoder for requests sent to the
// password-auth check-email-available endpoint.
func DecodeCheckEmailAvailableRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			email  *string
			aPIKey *string
		)
		emailRaw := r.URL.Query().Get("email")
		if emailRaw != "" {
			email = &emailRaw
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewCheckEmailAvailablePayload(email, aPIKey)

		return payload, nil
	}
}

// EncodeCheckPhoneAvailableResponse returns an encoder for responses returned
// by the password-auth check-phone-available endpoint.
func EncodeCheckPhoneAvailableResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(bool)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCheckPhoneAvailableRequest returns a decoder for requests sent to the
// password-auth check-phone-available endpoint.
func DecodeCheckPhoneAvailableRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			phone  *string
			aPIKey *string
		)
		phoneRaw := r.URL.Query().Get("phone")
		if phoneRaw != "" {
			phone = &phoneRaw
		}
		aPIKeyRaw := r.Header.Get("API-Key")
		if aPIKeyRaw != "" {
			aPIKey = &aPIKeyRaw
		}
		payload := NewCheckPhoneAvailablePayload(phone, aPIKey)

		return payload, nil
	}
}
