// Code generated by goa v3.0.6, DO NOT EDIT.
//
// password-auth HTTP server types
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package server

import (
	"unicode/utf8"

	passwordauth "github.com/anshap1719/authentication/controllers/gen/password_auth"
	passwordauthviews "github.com/anshap1719/authentication/controllers/gen/password_auth/views"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "password-auth" service "register"
// endpoint HTTP request body.
type RegisterRequestBody struct {
	// The email that will be attached to the account
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// The user's given name
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// The user's family name
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// The password associated with the new account
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// The user's phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// The recaptcha response code
	GRecaptchaResponse *string `form:"gRecaptchaResponse,omitempty" json:"gRecaptchaResponse,omitempty" xml:"gRecaptchaResponse,omitempty"`
}

// LoginRequestBody is the type of the "password-auth" service "login" endpoint
// HTTP request body.
type LoginRequestBody struct {
	// The email address of the account to login to
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// The password of the account to login to
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// 2 Factor Auth if user has enabled the feature
	TwoFactor *string `form:"TwoFactor,omitempty" json:"TwoFactor,omitempty" xml:"TwoFactor,omitempty"`
}

// ChangePasswordRequestBody is the type of the "password-auth" service
// "change-password" endpoint HTTP request body.
type ChangePasswordRequestBody struct {
	// The old password for the current user account
	OldPassword *string `form:"oldPassword,omitempty" json:"oldPassword,omitempty" xml:"oldPassword,omitempty"`
	// The new password for the current user account
	NewPassword *string `form:"newPassword,omitempty" json:"newPassword,omitempty" xml:"newPassword,omitempty"`
}

// ConfirmResetRequestBody is the type of the "password-auth" service
// "confirm-reset" endpoint HTTP request body.
type ConfirmResetRequestBody struct {
	// The UUID of the password reset, send from the user's email
	ResetCode *string `form:"resetCode,omitempty" json:"resetCode,omitempty" xml:"resetCode,omitempty"`
	// The ID of the user to reset the password of
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// The new password that will be used to login to the account
	NewPassword *string `form:"newPassword,omitempty" json:"newPassword,omitempty" xml:"newPassword,omitempty"`
}

// RegisterResponseBody is the type of the "password-auth" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// Unique unchanging user ID
	ID string `form:"id" json:"id" xml:"id"`
	// Phone Number Of the user
	Phone string `form:"phone" json:"phone" xml:"phone"`
	// Family name for the user
	LastName  string  `form:"lastName" json:"lastName" xml:"lastName"`
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// Email attached to the account of the user
	Email     string  `form:"email" json:"email" xml:"email"`
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Given name for the user
	FirstName        string  `form:"firstName" json:"firstName" xml:"firstName"`
	CountryPhoneCode *string `form:"countryPhoneCode,omitempty" json:"countryPhoneCode,omitempty" xml:"countryPhoneCode,omitempty"`
	// When the user attempts to change their email, this is what they will change
	// it to after they verify that it belongs to them
	ChangingEmail *string `form:"changingEmail,omitempty" json:"changingEmail,omitempty" xml:"changingEmail,omitempty"`
	// Whether the user is an administrator on the site
	IsAdmin *bool `form:"isAdmin,omitempty" json:"isAdmin,omitempty" xml:"isAdmin,omitempty"`
	// Whether the user has verified their email
	VerifiedEmail bool `form:"verifiedEmail" json:"verifiedEmail" xml:"verifiedEmail"`
}

// LoginResponseBody is the type of the "password-auth" service "login"
// endpoint HTTP response body.
type LoginResponseBody struct {
	// Unique unchanging user ID
	ID string `form:"id" json:"id" xml:"id"`
	// Phone Number Of the user
	Phone string `form:"phone" json:"phone" xml:"phone"`
	// Family name for the user
	LastName  string  `form:"lastName" json:"lastName" xml:"lastName"`
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// Email attached to the account of the user
	Email     string  `form:"email" json:"email" xml:"email"`
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Given name for the user
	FirstName        string  `form:"firstName" json:"firstName" xml:"firstName"`
	CountryPhoneCode *string `form:"countryPhoneCode,omitempty" json:"countryPhoneCode,omitempty" xml:"countryPhoneCode,omitempty"`
	// When the user attempts to change their email, this is what they will change
	// it to after they verify that it belongs to them
	ChangingEmail *string `form:"changingEmail,omitempty" json:"changingEmail,omitempty" xml:"changingEmail,omitempty"`
	// Whether the user is an administrator on the site
	IsAdmin *bool `form:"isAdmin,omitempty" json:"isAdmin,omitempty" xml:"isAdmin,omitempty"`
	// Whether the user has verified their email
	VerifiedEmail bool `form:"verifiedEmail" json:"verifiedEmail" xml:"verifiedEmail"`
}

// NewRegisterResponseBody builds the HTTP response body from the result of the
// "register" endpoint of the "password-auth" service.
func NewRegisterResponseBody(res *passwordauthviews.UserMediaView) *RegisterResponseBody {
	body := &RegisterResponseBody{
		ID:               *res.ID,
		FirstName:        *res.FirstName,
		LastName:         *res.LastName,
		Email:            *res.Email,
		Phone:            *res.Phone,
		ChangingEmail:    res.ChangingEmail,
		VerifiedEmail:    *res.VerifiedEmail,
		IsAdmin:          res.IsAdmin,
		UpdatedAt:        res.UpdatedAt,
		CreatedAt:        res.CreatedAt,
		CountryPhoneCode: res.CountryPhoneCode,
	}
	return body
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "login" endpoint of the "password-auth" service.
func NewLoginResponseBody(res *passwordauthviews.UserMediaView) *LoginResponseBody {
	body := &LoginResponseBody{
		ID:               *res.ID,
		FirstName:        *res.FirstName,
		LastName:         *res.LastName,
		Email:            *res.Email,
		Phone:            *res.Phone,
		ChangingEmail:    res.ChangingEmail,
		VerifiedEmail:    *res.VerifiedEmail,
		IsAdmin:          res.IsAdmin,
		UpdatedAt:        res.UpdatedAt,
		CreatedAt:        res.CreatedAt,
		CountryPhoneCode: res.CountryPhoneCode,
	}
	return body
}

// NewRegisterParams builds a password-auth service register endpoint payload.
func NewRegisterParams(body *RegisterRequestBody, authorization *string, xSession *string, aPIKey *string) *passwordauth.RegisterParams {
	v := &passwordauth.RegisterParams{
		Email:              *body.Email,
		FirstName:          *body.FirstName,
		LastName:           *body.LastName,
		Password:           *body.Password,
		Phone:              body.Phone,
		GRecaptchaResponse: *body.GRecaptchaResponse,
	}
	v.Authorization = authorization
	v.XSession = xSession
	v.APIKey = aPIKey
	return v
}

// NewLoginParams builds a password-auth service login endpoint payload.
func NewLoginParams(body *LoginRequestBody, token *string, aPIKey *string) *passwordauth.LoginParams {
	v := &passwordauth.LoginParams{
		Email:     *body.Email,
		Password:  *body.Password,
		TwoFactor: body.TwoFactor,
	}
	v.Token = token
	v.APIKey = aPIKey
	return v
}

// NewRemovePayload builds a password-auth service remove endpoint payload.
func NewRemovePayload(authorization *string, xSession *string, aPIKey *string) *passwordauth.RemovePayload {
	return &passwordauth.RemovePayload{
		Authorization: authorization,
		XSession:      xSession,
		APIKey:        aPIKey,
	}
}

// NewChangePasswordParams builds a password-auth service change-password
// endpoint payload.
func NewChangePasswordParams(body *ChangePasswordRequestBody, authorization string, xSession string, aPIKey *string) *passwordauth.ChangePasswordParams {
	v := &passwordauth.ChangePasswordParams{
		OldPassword: body.OldPassword,
		NewPassword: *body.NewPassword,
	}
	v.Authorization = authorization
	v.XSession = xSession
	v.APIKey = aPIKey
	return v
}

// NewResetPayload builds a password-auth service reset endpoint payload.
func NewResetPayload(email string, aPIKey *string) *passwordauth.ResetPayload {
	return &passwordauth.ResetPayload{
		Email:  &email,
		APIKey: aPIKey,
	}
}

// NewConfirmResetResetPasswordParams builds a password-auth service
// confirm-reset endpoint payload.
func NewConfirmResetResetPasswordParams(body *ConfirmResetRequestBody, aPIKey *string) *passwordauth.ResetPasswordParams {
	v := &passwordauth.ResetPasswordParams{
		ResetCode:   *body.ResetCode,
		UserID:      *body.UserID,
		NewPassword: *body.NewPassword,
	}
	v.APIKey = aPIKey
	return v
}

// NewCheckEmailAvailablePayload builds a password-auth service
// check-email-available endpoint payload.
func NewCheckEmailAvailablePayload(email *string, aPIKey *string) *passwordauth.CheckEmailAvailablePayload {
	return &passwordauth.CheckEmailAvailablePayload{
		Email:  email,
		APIKey: aPIKey,
	}
}

// NewCheckPhoneAvailablePayload builds a password-auth service
// check-phone-available endpoint payload.
func NewCheckPhoneAvailablePayload(phone *string, aPIKey *string) *passwordauth.CheckPhoneAvailablePayload {
	return &passwordauth.CheckPhoneAvailablePayload{
		Phone:  phone,
		APIKey: aPIKey,
	}
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	if body.GRecaptchaResponse == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("gRecaptchaResponse", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstName", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 2, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstName", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 50, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastName", *body.LastName, utf8.RuneCountInString(*body.LastName), 50, false))
		}
	}
	if body.Password != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.password", *body.Password, "^.*[\\w].*$"))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 6, true))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 100, false))
		}
	}
	return
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Password != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.password", *body.Password, "^.*[\\w].*$"))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 6, true))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 100, false))
		}
	}
	if body.TwoFactor != nil {
		if utf8.RuneCountInString(*body.TwoFactor) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.TwoFactor", *body.TwoFactor, utf8.RuneCountInString(*body.TwoFactor), 6, true))
		}
	}
	if body.TwoFactor != nil {
		if utf8.RuneCountInString(*body.TwoFactor) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.TwoFactor", *body.TwoFactor, utf8.RuneCountInString(*body.TwoFactor), 8, false))
		}
	}
	return
}

// ValidateChangePasswordRequestBody runs the validations defined on
// Change-PasswordRequestBody
func ValidateChangePasswordRequestBody(body *ChangePasswordRequestBody) (err error) {
	if body.NewPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("newPassword", "body"))
	}
	if body.OldPassword != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.oldPassword", *body.OldPassword, "^.*[\\w].*$"))
	}
	if body.OldPassword != nil {
		if utf8.RuneCountInString(*body.OldPassword) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.oldPassword", *body.OldPassword, utf8.RuneCountInString(*body.OldPassword), 6, true))
		}
	}
	if body.OldPassword != nil {
		if utf8.RuneCountInString(*body.OldPassword) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.oldPassword", *body.OldPassword, utf8.RuneCountInString(*body.OldPassword), 100, false))
		}
	}
	if body.NewPassword != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.newPassword", *body.NewPassword, "^.*[\\w].*$"))
	}
	if body.NewPassword != nil {
		if utf8.RuneCountInString(*body.NewPassword) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.newPassword", *body.NewPassword, utf8.RuneCountInString(*body.NewPassword), 6, true))
		}
	}
	if body.NewPassword != nil {
		if utf8.RuneCountInString(*body.NewPassword) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.newPassword", *body.NewPassword, utf8.RuneCountInString(*body.NewPassword), 100, false))
		}
	}
	return
}

// ValidateConfirmResetRequestBody runs the validations defined on
// Confirm-ResetRequestBody
func ValidateConfirmResetRequestBody(body *ConfirmResetRequestBody) (err error) {
	if body.ResetCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resetCode", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userID", "body"))
	}
	if body.NewPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("newPassword", "body"))
	}
	if body.NewPassword != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.newPassword", *body.NewPassword, "^.*[\\w].*$"))
	}
	if body.NewPassword != nil {
		if utf8.RuneCountInString(*body.NewPassword) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.newPassword", *body.NewPassword, utf8.RuneCountInString(*body.NewPassword), 6, true))
		}
	}
	if body.NewPassword != nil {
		if utf8.RuneCountInString(*body.NewPassword) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.newPassword", *body.NewPassword, utf8.RuneCountInString(*body.NewPassword), 100, false))
		}
	}
	return
}
