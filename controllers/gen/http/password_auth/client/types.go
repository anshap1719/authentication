// Code generated by goa v3.0.6, DO NOT EDIT.
//
// password-auth HTTP client types
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package client

import (
	passwordauth "github.com/anshap1719/authentication/controllers/gen/password_auth"
	passwordauthviews "github.com/anshap1719/authentication/controllers/gen/password_auth/views"
)

// RegisterRequestBody is the type of the "password-auth" service "register"
// endpoint HTTP request body.
type RegisterRequestBody struct {
	// The email that will be attached to the account
	Email string `form:"email" json:"email" xml:"email"`
	// The user's given name
	FirstName string `form:"firstName" json:"firstName" xml:"firstName"`
	// The user's family name
	LastName string `form:"lastName" json:"lastName" xml:"lastName"`
	// The password associated with the new account
	Password string `form:"password" json:"password" xml:"password"`
	// The user's phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// The recaptcha response code
	GRecaptchaResponse string `form:"gRecaptchaResponse" json:"gRecaptchaResponse" xml:"gRecaptchaResponse"`
}

// LoginRequestBody is the type of the "password-auth" service "login" endpoint
// HTTP request body.
type LoginRequestBody struct {
	// The email address of the account to login to
	Email string `form:"email" json:"email" xml:"email"`
	// The password of the account to login to
	Password string `form:"password" json:"password" xml:"password"`
	// 2 Factor Auth if user has enabled the feature
	TwoFactor *string `form:"TwoFactor,omitempty" json:"TwoFactor,omitempty" xml:"TwoFactor,omitempty"`
}

// ChangePasswordRequestBody is the type of the "password-auth" service
// "change-password" endpoint HTTP request body.
type ChangePasswordRequestBody struct {
	// The old password for the current user account
	OldPassword *string `form:"oldPassword,omitempty" json:"oldPassword,omitempty" xml:"oldPassword,omitempty"`
	// The new password for the current user account
	NewPassword string `form:"newPassword" json:"newPassword" xml:"newPassword"`
}

// ConfirmResetRequestBody is the type of the "password-auth" service
// "confirm-reset" endpoint HTTP request body.
type ConfirmResetRequestBody struct {
	// The UUID of the password reset, send from the user's email
	ResetCode string `form:"resetCode" json:"resetCode" xml:"resetCode"`
	// The ID of the user to reset the password of
	UserID string `form:"userID" json:"userID" xml:"userID"`
	// The new password that will be used to login to the account
	NewPassword string `form:"newPassword" json:"newPassword" xml:"newPassword"`
}

// RegisterResponseBody is the type of the "password-auth" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// Unique unchanging user ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Family name for the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Email attached to the account of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Phone Number Of the user
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// When the user attempts to change their email, this is what they will change
	// it to after they verify that it belongs to them
	ChangingEmail *string `form:"changingEmail,omitempty" json:"changingEmail,omitempty" xml:"changingEmail,omitempty"`
	// Whether the user has verified their email
	VerifiedEmail *bool `form:"verifiedEmail,omitempty" json:"verifiedEmail,omitempty" xml:"verifiedEmail,omitempty"`
	// Whether the user is an administrator on the site
	IsAdmin          *bool   `form:"isAdmin,omitempty" json:"isAdmin,omitempty" xml:"isAdmin,omitempty"`
	UpdatedAt        *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	IsActive         *bool   `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	CreatedAt        *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	CountryPhoneCode *string `form:"countryPhoneCode,omitempty" json:"countryPhoneCode,omitempty" xml:"countryPhoneCode,omitempty"`
}

// LoginResponseBody is the type of the "password-auth" service "login"
// endpoint HTTP response body.
type LoginResponseBody struct {
	// Unique unchanging user ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Family name for the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Email attached to the account of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Phone Number Of the user
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// When the user attempts to change their email, this is what they will change
	// it to after they verify that it belongs to them
	ChangingEmail *string `form:"changingEmail,omitempty" json:"changingEmail,omitempty" xml:"changingEmail,omitempty"`
	// Whether the user has verified their email
	VerifiedEmail *bool `form:"verifiedEmail,omitempty" json:"verifiedEmail,omitempty" xml:"verifiedEmail,omitempty"`
	// Whether the user is an administrator on the site
	IsAdmin          *bool   `form:"isAdmin,omitempty" json:"isAdmin,omitempty" xml:"isAdmin,omitempty"`
	UpdatedAt        *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	IsActive         *bool   `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	CreatedAt        *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	CountryPhoneCode *string `form:"countryPhoneCode,omitempty" json:"countryPhoneCode,omitempty" xml:"countryPhoneCode,omitempty"`
}

// NewRegisterRequestBody builds the HTTP request body from the payload of the
// "register" endpoint of the "password-auth" service.
func NewRegisterRequestBody(p *passwordauth.RegisterParams) *RegisterRequestBody {
	body := &RegisterRequestBody{
		Email:              p.Email,
		FirstName:          p.FirstName,
		LastName:           p.LastName,
		Password:           p.Password,
		Phone:              p.Phone,
		GRecaptchaResponse: p.GRecaptchaResponse,
	}
	return body
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "login" endpoint of the "password-auth" service.
func NewLoginRequestBody(p *passwordauth.LoginParams) *LoginRequestBody {
	body := &LoginRequestBody{
		Email:     p.Email,
		Password:  p.Password,
		TwoFactor: p.TwoFactor,
	}
	return body
}

// NewChangePasswordRequestBody builds the HTTP request body from the payload
// of the "change-password" endpoint of the "password-auth" service.
func NewChangePasswordRequestBody(p *passwordauth.ChangePasswordParams) *ChangePasswordRequestBody {
	body := &ChangePasswordRequestBody{
		OldPassword: p.OldPassword,
		NewPassword: p.NewPassword,
	}
	return body
}

// NewConfirmResetRequestBody builds the HTTP request body from the payload of
// the "confirm-reset" endpoint of the "password-auth" service.
func NewConfirmResetRequestBody(p *passwordauth.ResetPasswordParams) *ConfirmResetRequestBody {
	body := &ConfirmResetRequestBody{
		ResetCode:   p.ResetCode,
		UserID:      p.UserID,
		NewPassword: p.NewPassword,
	}
	return body
}

// NewRegisterUserMediaOK builds a "password-auth" service "register" endpoint
// result from a HTTP "OK" response.
func NewRegisterUserMediaOK(body *RegisterResponseBody, authorization string, xSession string) *passwordauthviews.UserMediaView {
	v := &passwordauthviews.UserMediaView{
		ID:               body.ID,
		FirstName:        body.FirstName,
		LastName:         body.LastName,
		Email:            body.Email,
		Phone:            body.Phone,
		ChangingEmail:    body.ChangingEmail,
		VerifiedEmail:    body.VerifiedEmail,
		IsAdmin:          body.IsAdmin,
		UpdatedAt:        body.UpdatedAt,
		IsActive:         body.IsActive,
		CreatedAt:        body.CreatedAt,
		CountryPhoneCode: body.CountryPhoneCode,
	}
	v.Authorization = &authorization
	v.XSession = &xSession
	return v
}

// NewLoginUserMediaOK builds a "password-auth" service "login" endpoint result
// from a HTTP "OK" response.
func NewLoginUserMediaOK(body *LoginResponseBody, authorization string, xSession string) *passwordauthviews.UserMediaView {
	v := &passwordauthviews.UserMediaView{
		ID:               body.ID,
		FirstName:        body.FirstName,
		LastName:         body.LastName,
		Email:            body.Email,
		Phone:            body.Phone,
		ChangingEmail:    body.ChangingEmail,
		VerifiedEmail:    body.VerifiedEmail,
		IsAdmin:          body.IsAdmin,
		UpdatedAt:        body.UpdatedAt,
		IsActive:         body.IsActive,
		CreatedAt:        body.CreatedAt,
		CountryPhoneCode: body.CountryPhoneCode,
	}
	v.Authorization = &authorization
	v.XSession = &xSession
	return v
}
