// Code generated by goa v3.0.6, DO NOT EDIT.
//
// linkedin HTTP client CLI support package
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package client

import (
	linkedin "github.com/anshap1719/authentication/controllers/gen/linkedin"
)

// BuildRegisterURLPayload builds the payload for the linkedin register-url
// endpoint from CLI flags.
func BuildRegisterURLPayload(linkedinRegisterURLAPIKey string) (*linkedin.RegisterURLPayload, error) {
	var aPIKey *string
	{
		if linkedinRegisterURLAPIKey != "" {
			aPIKey = &linkedinRegisterURLAPIKey
		}
	}
	payload := &linkedin.RegisterURLPayload{
		APIKey: aPIKey,
	}
	return payload, nil
}

// BuildAttachToAccountPayload builds the payload for the linkedin
// attach-to-account endpoint from CLI flags.
func BuildAttachToAccountPayload(linkedinAttachToAccountAuthorization string, linkedinAttachToAccountXSession string, linkedinAttachToAccountAPIKey string) (*linkedin.AttachToAccountPayload, error) {
	var authorization *string
	{
		if linkedinAttachToAccountAuthorization != "" {
			authorization = &linkedinAttachToAccountAuthorization
		}
	}
	var xSession *string
	{
		if linkedinAttachToAccountXSession != "" {
			xSession = &linkedinAttachToAccountXSession
		}
	}
	var aPIKey *string
	{
		if linkedinAttachToAccountAPIKey != "" {
			aPIKey = &linkedinAttachToAccountAPIKey
		}
	}
	payload := &linkedin.AttachToAccountPayload{
		Authorization: authorization,
		XSession:      xSession,
		APIKey:        aPIKey,
	}
	return payload, nil
}

// BuildDetachFromAccountPayload builds the payload for the linkedin
// detach-from-account endpoint from CLI flags.
func BuildDetachFromAccountPayload(linkedinDetachFromAccountAuthorization string, linkedinDetachFromAccountXSession string, linkedinDetachFromAccountAPIKey string) (*linkedin.DetachFromAccountPayload, error) {
	var authorization *string
	{
		if linkedinDetachFromAccountAuthorization != "" {
			authorization = &linkedinDetachFromAccountAuthorization
		}
	}
	var xSession *string
	{
		if linkedinDetachFromAccountXSession != "" {
			xSession = &linkedinDetachFromAccountXSession
		}
	}
	var aPIKey *string
	{
		if linkedinDetachFromAccountAPIKey != "" {
			aPIKey = &linkedinDetachFromAccountAPIKey
		}
	}
	payload := &linkedin.DetachFromAccountPayload{
		Authorization: authorization,
		XSession:      xSession,
		APIKey:        aPIKey,
	}
	return payload, nil
}

// BuildReceivePayload builds the payload for the linkedin receive endpoint
// from CLI flags.
func BuildReceivePayload(linkedinReceiveCode string, linkedinReceiveState string, linkedinReceiveAuthorization string, linkedinReceiveXSession string, linkedinReceiveRedirectURL string, linkedinReceiveAPIKey string) (*linkedin.ReceivePayload, error) {
	var code string
	{
		code = linkedinReceiveCode
	}
	var state string
	{
		state = linkedinReceiveState
	}
	var authorization *string
	{
		if linkedinReceiveAuthorization != "" {
			authorization = &linkedinReceiveAuthorization
		}
	}
	var xSession *string
	{
		if linkedinReceiveXSession != "" {
			xSession = &linkedinReceiveXSession
		}
	}
	var redirectURL *string
	{
		if linkedinReceiveRedirectURL != "" {
			redirectURL = &linkedinReceiveRedirectURL
		}
	}
	var aPIKey *string
	{
		if linkedinReceiveAPIKey != "" {
			aPIKey = &linkedinReceiveAPIKey
		}
	}
	payload := &linkedin.ReceivePayload{
		Code:          &code,
		State:         &state,
		Authorization: authorization,
		XSession:      xSession,
		RedirectURL:   redirectURL,
		APIKey:        aPIKey,
	}
	return payload, nil
}
