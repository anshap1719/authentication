// Code generated by goa v3.0.6, DO NOT EDIT.
//
// linkedin HTTP client types
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package client

import (
	linkedinviews "github.com/anshap1719/authentication/controllers/gen/linkedin/views"
)

// ReceiveResponseBody is the type of the "linkedin" service "receive" endpoint
// HTTP response body.
type ReceiveResponseBody struct {
	// Unique unchanging user ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Family name for the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Email attached to the account of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Phone Number Of the user
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// When the user attempts to change their email, this is what they will change
	// it to after they verify that it belongs to them
	ChangingEmail *string `form:"changingEmail,omitempty" json:"changingEmail,omitempty" xml:"changingEmail,omitempty"`
	// Whether the user has verified their email
	VerifiedEmail *bool `form:"verifiedEmail,omitempty" json:"verifiedEmail,omitempty" xml:"verifiedEmail,omitempty"`
	// Whether the user is an administrator on the site
	IsAdmin          *bool   `form:"isAdmin,omitempty" json:"isAdmin,omitempty" xml:"isAdmin,omitempty"`
	UpdatedAt        *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	IsActive         *bool   `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	CreatedAt        *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	CountryPhoneCode *string `form:"countryPhoneCode,omitempty" json:"countryPhoneCode,omitempty" xml:"countryPhoneCode,omitempty"`
}

// NewReceiveUserMediaOK builds a "linkedin" service "receive" endpoint result
// from a HTTP "OK" response.
func NewReceiveUserMediaOK(body *ReceiveResponseBody, authorization string, xSession string) *linkedinviews.UserMediaView {
	v := &linkedinviews.UserMediaView{
		ID:               body.ID,
		FirstName:        body.FirstName,
		LastName:         body.LastName,
		Email:            body.Email,
		Phone:            body.Phone,
		ChangingEmail:    body.ChangingEmail,
		VerifiedEmail:    body.VerifiedEmail,
		IsAdmin:          body.IsAdmin,
		UpdatedAt:        body.UpdatedAt,
		IsActive:         body.IsActive,
		CreatedAt:        body.CreatedAt,
		CountryPhoneCode: body.CountryPhoneCode,
	}
	v.Authorization = &authorization
	v.XSession = &xSession
	return v
}
