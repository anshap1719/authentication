// Code generated by goa v3.0.6, DO NOT EDIT.
//
// instagram client HTTP transport
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the instagram service endpoint HTTP clients.
type Client struct {
	// RegisterURL Doer is the HTTP client used to make requests to the
	// register-url endpoint.
	RegisterURLDoer goahttp.Doer

	// AttachToAccount Doer is the HTTP client used to make requests to the
	// attach-to-account endpoint.
	AttachToAccountDoer goahttp.Doer

	// DetachFromAccount Doer is the HTTP client used to make requests to the
	// detach-from-account endpoint.
	DetachFromAccountDoer goahttp.Doer

	// Receive Doer is the HTTP client used to make requests to the receive
	// endpoint.
	ReceiveDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the instagram service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		RegisterURLDoer:       doer,
		AttachToAccountDoer:   doer,
		DetachFromAccountDoer: doer,
		ReceiveDoer:           doer,
		CORSDoer:              doer,
		RestoreResponseBody:   restoreBody,
		scheme:                scheme,
		host:                  host,
		decoder:               dec,
		encoder:               enc,
	}
}

// RegisterURL returns an endpoint that makes HTTP requests to the instagram
// service register-url server.
func (c *Client) RegisterURL() goa.Endpoint {
	var (
		encodeRequest  = EncodeRegisterURLRequest(c.encoder)
		decodeResponse = DecodeRegisterURLResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRegisterURLRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RegisterURLDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("instagram", "register-url", err)
		}
		return decodeResponse(resp)
	}
}

// AttachToAccount returns an endpoint that makes HTTP requests to the
// instagram service attach-to-account server.
func (c *Client) AttachToAccount() goa.Endpoint {
	var (
		encodeRequest  = EncodeAttachToAccountRequest(c.encoder)
		decodeResponse = DecodeAttachToAccountResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAttachToAccountRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AttachToAccountDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("instagram", "attach-to-account", err)
		}
		return decodeResponse(resp)
	}
}

// DetachFromAccount returns an endpoint that makes HTTP requests to the
// instagram service detach-from-account server.
func (c *Client) DetachFromAccount() goa.Endpoint {
	var (
		encodeRequest  = EncodeDetachFromAccountRequest(c.encoder)
		decodeResponse = DecodeDetachFromAccountResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDetachFromAccountRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DetachFromAccountDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("instagram", "detach-from-account", err)
		}
		return decodeResponse(resp)
	}
}

// Receive returns an endpoint that makes HTTP requests to the instagram
// service receive server.
func (c *Client) Receive() goa.Endpoint {
	var (
		encodeRequest  = EncodeReceiveRequest(c.encoder)
		decodeResponse = DecodeReceiveResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildReceiveRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReceiveDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("instagram", "receive", err)
		}
		return decodeResponse(resp)
	}
}
