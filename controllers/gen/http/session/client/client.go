// Code generated by goa v3.0.6, DO NOT EDIT.
//
// session client HTTP transport
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the session service endpoint HTTP clients.
type Client struct {
	// Refresh Doer is the HTTP client used to make requests to the refresh
	// endpoint.
	RefreshDoer goahttp.Doer

	// Logout Doer is the HTTP client used to make requests to the logout endpoint.
	LogoutDoer goahttp.Doer

	// LogoutOther Doer is the HTTP client used to make requests to the
	// logout-other endpoint.
	LogoutOtherDoer goahttp.Doer

	// LogoutSpecific Doer is the HTTP client used to make requests to the
	// logout-specific endpoint.
	LogoutSpecificDoer goahttp.Doer

	// GetSessions Doer is the HTTP client used to make requests to the
	// get-sessions endpoint.
	GetSessionsDoer goahttp.Doer

	// RedeemToken Doer is the HTTP client used to make requests to the redeemToken
	// endpoint.
	RedeemTokenDoer goahttp.Doer

	// CleanSessions Doer is the HTTP client used to make requests to the
	// clean-sessions endpoint.
	CleanSessionsDoer goahttp.Doer

	// CleanLoginToken Doer is the HTTP client used to make requests to the
	// clean-login-token endpoint.
	CleanLoginTokenDoer goahttp.Doer

	// CleanMergeToken Doer is the HTTP client used to make requests to the
	// clean-merge-token endpoint.
	CleanMergeTokenDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the session service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		RefreshDoer:         doer,
		LogoutDoer:          doer,
		LogoutOtherDoer:     doer,
		LogoutSpecificDoer:  doer,
		GetSessionsDoer:     doer,
		RedeemTokenDoer:     doer,
		CleanSessionsDoer:   doer,
		CleanLoginTokenDoer: doer,
		CleanMergeTokenDoer: doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Refresh returns an endpoint that makes HTTP requests to the session service
// refresh server.
func (c *Client) Refresh() goa.Endpoint {
	var (
		encodeRequest  = EncodeRefreshRequest(c.encoder)
		decodeResponse = DecodeRefreshResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRefreshRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RefreshDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("session", "refresh", err)
		}
		return decodeResponse(resp)
	}
}

// Logout returns an endpoint that makes HTTP requests to the session service
// logout server.
func (c *Client) Logout() goa.Endpoint {
	var (
		encodeRequest  = EncodeLogoutRequest(c.encoder)
		decodeResponse = DecodeLogoutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildLogoutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LogoutDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("session", "logout", err)
		}
		return decodeResponse(resp)
	}
}

// LogoutOther returns an endpoint that makes HTTP requests to the session
// service logout-other server.
func (c *Client) LogoutOther() goa.Endpoint {
	var (
		encodeRequest  = EncodeLogoutOtherRequest(c.encoder)
		decodeResponse = DecodeLogoutOtherResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildLogoutOtherRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LogoutOtherDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("session", "logout-other", err)
		}
		return decodeResponse(resp)
	}
}

// LogoutSpecific returns an endpoint that makes HTTP requests to the session
// service logout-specific server.
func (c *Client) LogoutSpecific() goa.Endpoint {
	var (
		encodeRequest  = EncodeLogoutSpecificRequest(c.encoder)
		decodeResponse = DecodeLogoutSpecificResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildLogoutSpecificRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LogoutSpecificDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("session", "logout-specific", err)
		}
		return decodeResponse(resp)
	}
}

// GetSessions returns an endpoint that makes HTTP requests to the session
// service get-sessions server.
func (c *Client) GetSessions() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetSessionsRequest(c.encoder)
		decodeResponse = DecodeGetSessionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetSessionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSessionsDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("session", "get-sessions", err)
		}
		return decodeResponse(resp)
	}
}

// RedeemToken returns an endpoint that makes HTTP requests to the session
// service redeemToken server.
func (c *Client) RedeemToken() goa.Endpoint {
	var (
		encodeRequest  = EncodeRedeemTokenRequest(c.encoder)
		decodeResponse = DecodeRedeemTokenResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRedeemTokenRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RedeemTokenDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("session", "redeemToken", err)
		}
		return decodeResponse(resp)
	}
}

// CleanSessions returns an endpoint that makes HTTP requests to the session
// service clean-sessions server.
func (c *Client) CleanSessions() goa.Endpoint {
	var (
		encodeRequest  = EncodeCleanSessionsRequest(c.encoder)
		decodeResponse = DecodeCleanSessionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCleanSessionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CleanSessionsDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("session", "clean-sessions", err)
		}
		return decodeResponse(resp)
	}
}

// CleanLoginToken returns an endpoint that makes HTTP requests to the session
// service clean-login-token server.
func (c *Client) CleanLoginToken() goa.Endpoint {
	var (
		encodeRequest  = EncodeCleanLoginTokenRequest(c.encoder)
		decodeResponse = DecodeCleanLoginTokenResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCleanLoginTokenRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CleanLoginTokenDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("session", "clean-login-token", err)
		}
		return decodeResponse(resp)
	}
}

// CleanMergeToken returns an endpoint that makes HTTP requests to the session
// service clean-merge-token server.
func (c *Client) CleanMergeToken() goa.Endpoint {
	var (
		encodeRequest  = EncodeCleanMergeTokenRequest(c.encoder)
		decodeResponse = DecodeCleanMergeTokenResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCleanMergeTokenRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CleanMergeTokenDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("session", "clean-merge-token", err)
		}
		return decodeResponse(resp)
	}
}
