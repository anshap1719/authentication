// Code generated by goa v3.0.6, DO NOT EDIT.
//
// session HTTP server
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package server

import (
	"context"
	"net/http"

	session "github.com/anshap1719/authentication/controllers/gen/session"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the session service endpoint HTTP handlers.
type Server struct {
	Mounts          []*MountPoint
	Refresh         http.Handler
	Logout          http.Handler
	LogoutOther     http.Handler
	LogoutSpecific  http.Handler
	GetSessions     http.Handler
	RedeemToken     http.Handler
	CleanSessions   http.Handler
	CleanLoginToken http.Handler
	CleanMergeToken http.Handler
	CORS            http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the session service endpoints.
func New(
	e *session.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Refresh", "POST", "/auth/session"},
			{"Logout", "POST", "/auth/logout"},
			{"LogoutOther", "POST", "/auth/logout/all"},
			{"LogoutSpecific", "POST", "/auth/logout/:session-id"},
			{"GetSessions", "GET", "/auth/sessions"},
			{"RedeemToken", "POST", "/auth/token"},
			{"CleanSessions", "GET", "/auth/clean/sessions"},
			{"CleanLoginToken", "GET", "/auth/clean/token/login"},
			{"CleanMergeToken", "GET", "/auth/clean/token/merge"},
			{"CORS", "OPTIONS", "/auth/session"},
			{"CORS", "OPTIONS", "/auth/logout"},
			{"CORS", "OPTIONS", "/auth/logout/all"},
			{"CORS", "OPTIONS", "/auth/logout/:session-id"},
			{"CORS", "OPTIONS", "/auth/sessions"},
			{"CORS", "OPTIONS", "/auth/token"},
			{"CORS", "OPTIONS", "/auth/clean/sessions"},
			{"CORS", "OPTIONS", "/auth/clean/token/login"},
			{"CORS", "OPTIONS", "/auth/clean/token/merge"},
		},
		Refresh:         NewRefreshHandler(e.Refresh, mux, dec, enc, eh),
		Logout:          NewLogoutHandler(e.Logout, mux, dec, enc, eh),
		LogoutOther:     NewLogoutOtherHandler(e.LogoutOther, mux, dec, enc, eh),
		LogoutSpecific:  NewLogoutSpecificHandler(e.LogoutSpecific, mux, dec, enc, eh),
		GetSessions:     NewGetSessionsHandler(e.GetSessions, mux, dec, enc, eh),
		RedeemToken:     NewRedeemTokenHandler(e.RedeemToken, mux, dec, enc, eh),
		CleanSessions:   NewCleanSessionsHandler(e.CleanSessions, mux, dec, enc, eh),
		CleanLoginToken: NewCleanLoginTokenHandler(e.CleanLoginToken, mux, dec, enc, eh),
		CleanMergeToken: NewCleanMergeTokenHandler(e.CleanMergeToken, mux, dec, enc, eh),
		CORS:            NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "session" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Refresh = m(s.Refresh)
	s.Logout = m(s.Logout)
	s.LogoutOther = m(s.LogoutOther)
	s.LogoutSpecific = m(s.LogoutSpecific)
	s.GetSessions = m(s.GetSessions)
	s.RedeemToken = m(s.RedeemToken)
	s.CleanSessions = m(s.CleanSessions)
	s.CleanLoginToken = m(s.CleanLoginToken)
	s.CleanMergeToken = m(s.CleanMergeToken)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the session endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountRefreshHandler(mux, h.Refresh)
	MountLogoutHandler(mux, h.Logout)
	MountLogoutOtherHandler(mux, h.LogoutOther)
	MountLogoutSpecificHandler(mux, h.LogoutSpecific)
	MountGetSessionsHandler(mux, h.GetSessions)
	MountRedeemTokenHandler(mux, h.RedeemToken)
	MountCleanSessionsHandler(mux, h.CleanSessions)
	MountCleanLoginTokenHandler(mux, h.CleanLoginToken)
	MountCleanMergeTokenHandler(mux, h.CleanMergeToken)
	MountCORSHandler(mux, h.CORS)
}

// MountRefreshHandler configures the mux to serve the "session" service
// "refresh" endpoint.
func MountRefreshHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleSessionOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/auth/session", f)
}

// NewRefreshHandler creates a HTTP handler which loads the HTTP request and
// calls the "session" service "refresh" endpoint.
func NewRefreshHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeRefreshRequest(mux, dec)
		encodeResponse = EncodeRefreshResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "refresh")
		ctx = context.WithValue(ctx, goa.ServiceKey, "session")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountLogoutHandler configures the mux to serve the "session" service
// "logout" endpoint.
func MountLogoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleSessionOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/auth/logout", f)
}

// NewLogoutHandler creates a HTTP handler which loads the HTTP request and
// calls the "session" service "logout" endpoint.
func NewLogoutHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeLogoutRequest(mux, dec)
		encodeResponse = EncodeLogoutResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "logout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "session")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountLogoutOtherHandler configures the mux to serve the "session" service
// "logout-other" endpoint.
func MountLogoutOtherHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleSessionOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/auth/logout/all", f)
}

// NewLogoutOtherHandler creates a HTTP handler which loads the HTTP request
// and calls the "session" service "logout-other" endpoint.
func NewLogoutOtherHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeLogoutOtherRequest(mux, dec)
		encodeResponse = EncodeLogoutOtherResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "logout-other")
		ctx = context.WithValue(ctx, goa.ServiceKey, "session")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountLogoutSpecificHandler configures the mux to serve the "session" service
// "logout-specific" endpoint.
func MountLogoutSpecificHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleSessionOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/auth/logout/:session-id", f)
}

// NewLogoutSpecificHandler creates a HTTP handler which loads the HTTP request
// and calls the "session" service "logout-specific" endpoint.
func NewLogoutSpecificHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeLogoutSpecificRequest(mux, dec)
		encodeResponse = EncodeLogoutSpecificResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "logout-specific")
		ctx = context.WithValue(ctx, goa.ServiceKey, "session")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountGetSessionsHandler configures the mux to serve the "session" service
// "get-sessions" endpoint.
func MountGetSessionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleSessionOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/auth/sessions", f)
}

// NewGetSessionsHandler creates a HTTP handler which loads the HTTP request
// and calls the "session" service "get-sessions" endpoint.
func NewGetSessionsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeGetSessionsRequest(mux, dec)
		encodeResponse = EncodeGetSessionsResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-sessions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "session")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountRedeemTokenHandler configures the mux to serve the "session" service
// "redeemToken" endpoint.
func MountRedeemTokenHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleSessionOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/auth/token", f)
}

// NewRedeemTokenHandler creates a HTTP handler which loads the HTTP request
// and calls the "session" service "redeemToken" endpoint.
func NewRedeemTokenHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeRedeemTokenRequest(mux, dec)
		encodeResponse = EncodeRedeemTokenResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "redeemToken")
		ctx = context.WithValue(ctx, goa.ServiceKey, "session")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountCleanSessionsHandler configures the mux to serve the "session" service
// "clean-sessions" endpoint.
func MountCleanSessionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleSessionOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/auth/clean/sessions", f)
}

// NewCleanSessionsHandler creates a HTTP handler which loads the HTTP request
// and calls the "session" service "clean-sessions" endpoint.
func NewCleanSessionsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeCleanSessionsRequest(mux, dec)
		encodeResponse = EncodeCleanSessionsResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "clean-sessions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "session")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountCleanLoginTokenHandler configures the mux to serve the "session"
// service "clean-login-token" endpoint.
func MountCleanLoginTokenHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleSessionOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/auth/clean/token/login", f)
}

// NewCleanLoginTokenHandler creates a HTTP handler which loads the HTTP
// request and calls the "session" service "clean-login-token" endpoint.
func NewCleanLoginTokenHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeCleanLoginTokenRequest(mux, dec)
		encodeResponse = EncodeCleanLoginTokenResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "clean-login-token")
		ctx = context.WithValue(ctx, goa.ServiceKey, "session")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountCleanMergeTokenHandler configures the mux to serve the "session"
// service "clean-merge-token" endpoint.
func MountCleanMergeTokenHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleSessionOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/auth/clean/token/merge", f)
}

// NewCleanMergeTokenHandler creates a HTTP handler which loads the HTTP
// request and calls the "session" service "clean-merge-token" endpoint.
func NewCleanMergeTokenHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeCleanMergeTokenRequest(mux, dec)
		encodeResponse = EncodeCleanMergeTokenResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "clean-merge-token")
		ctx = context.WithValue(ctx, goa.ServiceKey, "session")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service session.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = handleSessionOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/auth/session", f)
	mux.Handle("OPTIONS", "/auth/logout", f)
	mux.Handle("OPTIONS", "/auth/logout/all", f)
	mux.Handle("OPTIONS", "/auth/logout/:session-id", f)
	mux.Handle("OPTIONS", "/auth/sessions", f)
	mux.Handle("OPTIONS", "/auth/token", f)
	mux.Handle("OPTIONS", "/auth/clean/sessions", f)
	mux.Handle("OPTIONS", "/auth/clean/token/login", f)
	mux.Handle("OPTIONS", "/auth/clean/token/merge", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// handleSessionOrigin applies the CORS response headers corresponding to the
// origin for the service session.
func handleSessionOrigin(h http.Handler) http.Handler {
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Access-Control-Expose-Headers", "Authorization, X-Session")
			w.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PATCH, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "*")
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
