// Code generated by goa v3.0.6, DO NOT EDIT.
//
// facebook HTTP client CLI support package
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package client

import (
	facebook "github.com/anshap1719/authentication/controllers/gen/facebook"
)

// BuildRegisterURLPayload builds the payload for the facebook register-url
// endpoint from CLI flags.
func BuildRegisterURLPayload(facebookRegisterURLAPIKey string) (*facebook.RegisterURLPayload, error) {
	var aPIKey *string
	{
		if facebookRegisterURLAPIKey != "" {
			aPIKey = &facebookRegisterURLAPIKey
		}
	}
	payload := &facebook.RegisterURLPayload{
		APIKey: aPIKey,
	}
	return payload, nil
}

// BuildAttachToAccountPayload builds the payload for the facebook
// attach-to-account endpoint from CLI flags.
func BuildAttachToAccountPayload(facebookAttachToAccountAuthorization string, facebookAttachToAccountXSession string, facebookAttachToAccountAPIKey string) (*facebook.AttachToAccountPayload, error) {
	var authorization *string
	{
		if facebookAttachToAccountAuthorization != "" {
			authorization = &facebookAttachToAccountAuthorization
		}
	}
	var xSession *string
	{
		if facebookAttachToAccountXSession != "" {
			xSession = &facebookAttachToAccountXSession
		}
	}
	var aPIKey *string
	{
		if facebookAttachToAccountAPIKey != "" {
			aPIKey = &facebookAttachToAccountAPIKey
		}
	}
	payload := &facebook.AttachToAccountPayload{
		Authorization: authorization,
		XSession:      xSession,
		APIKey:        aPIKey,
	}
	return payload, nil
}

// BuildDetachFromAccountPayload builds the payload for the facebook
// detach-from-account endpoint from CLI flags.
func BuildDetachFromAccountPayload(facebookDetachFromAccountAuthorization string, facebookDetachFromAccountXSession string, facebookDetachFromAccountAPIKey string) (*facebook.DetachFromAccountPayload, error) {
	var authorization *string
	{
		if facebookDetachFromAccountAuthorization != "" {
			authorization = &facebookDetachFromAccountAuthorization
		}
	}
	var xSession *string
	{
		if facebookDetachFromAccountXSession != "" {
			xSession = &facebookDetachFromAccountXSession
		}
	}
	var aPIKey *string
	{
		if facebookDetachFromAccountAPIKey != "" {
			aPIKey = &facebookDetachFromAccountAPIKey
		}
	}
	payload := &facebook.DetachFromAccountPayload{
		Authorization: authorization,
		XSession:      xSession,
		APIKey:        aPIKey,
	}
	return payload, nil
}

// BuildReceivePayload builds the payload for the facebook receive endpoint
// from CLI flags.
func BuildReceivePayload(facebookReceiveCode string, facebookReceiveState string, facebookReceiveAuthorization string, facebookReceiveXSession string, facebookReceiveRedirectURL string, facebookReceiveAPIKey string) (*facebook.ReceivePayload, error) {
	var code string
	{
		code = facebookReceiveCode
	}
	var state string
	{
		state = facebookReceiveState
	}
	var authorization *string
	{
		if facebookReceiveAuthorization != "" {
			authorization = &facebookReceiveAuthorization
		}
	}
	var xSession *string
	{
		if facebookReceiveXSession != "" {
			xSession = &facebookReceiveXSession
		}
	}
	var redirectURL *string
	{
		if facebookReceiveRedirectURL != "" {
			redirectURL = &facebookReceiveRedirectURL
		}
	}
	var aPIKey *string
	{
		if facebookReceiveAPIKey != "" {
			aPIKey = &facebookReceiveAPIKey
		}
	}
	payload := &facebook.ReceivePayload{
		Code:          &code,
		State:         &state,
		Authorization: authorization,
		XSession:      xSession,
		RedirectURL:   redirectURL,
		APIKey:        aPIKey,
	}
	return payload, nil
}
