// Code generated by goa v3.0.6, DO NOT EDIT.
//
// twitter HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	twitter "github.com/anshap1719/authentication/controllers/gen/twitter"
	twitterviews "github.com/anshap1719/authentication/controllers/gen/twitter/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildRegisterURLRequest instantiates a HTTP request object with method and
// path set to call the "twitter" service "register-url" endpoint
func (c *Client) BuildRegisterURLRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RegisterURLTwitterPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("twitter", "register-url", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRegisterURLRequest returns an encoder for requests sent to the twitter
// register-url server.
func EncodeRegisterURLRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*twitter.RegisterURLPayload)
		if !ok {
			return goahttp.ErrInvalidType("twitter", "register-url", "*twitter.RegisterURLPayload", v)
		}
		if p.APIKey != nil {
			req.Header.Set("API-Key", *p.APIKey)
		}
		return nil
	}
}

// DecodeRegisterURLResponse returns a decoder for responses returned by the
// twitter register-url endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeRegisterURLResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("twitter", "register-url", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("twitter", "register-url", resp.StatusCode, string(body))
		}
	}
}

// BuildAttachToAccountRequest instantiates a HTTP request object with method
// and path set to call the "twitter" service "attach-to-account" endpoint
func (c *Client) BuildAttachToAccountRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AttachToAccountTwitterPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("twitter", "attach-to-account", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAttachToAccountRequest returns an encoder for requests sent to the
// twitter attach-to-account server.
func EncodeAttachToAccountRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*twitter.AttachToAccountPayload)
		if !ok {
			return goahttp.ErrInvalidType("twitter", "attach-to-account", "*twitter.AttachToAccountPayload", v)
		}
		if p.Authorization != nil {
			req.Header.Set("Authorization", *p.Authorization)
		}
		if p.XSession != nil {
			req.Header.Set("X-Session", *p.XSession)
		}
		if p.APIKey != nil {
			req.Header.Set("API-Key", *p.APIKey)
		}
		return nil
	}
}

// DecodeAttachToAccountResponse returns a decoder for responses returned by
// the twitter attach-to-account endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeAttachToAccountResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("twitter", "attach-to-account", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("twitter", "attach-to-account", resp.StatusCode, string(body))
		}
	}
}

// BuildDetachFromAccountRequest instantiates a HTTP request object with method
// and path set to call the "twitter" service "detach-from-account" endpoint
func (c *Client) BuildDetachFromAccountRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DetachFromAccountTwitterPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("twitter", "detach-from-account", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDetachFromAccountRequest returns an encoder for requests sent to the
// twitter detach-from-account server.
func EncodeDetachFromAccountRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*twitter.DetachFromAccountPayload)
		if !ok {
			return goahttp.ErrInvalidType("twitter", "detach-from-account", "*twitter.DetachFromAccountPayload", v)
		}
		if p.Authorization != nil {
			req.Header.Set("Authorization", *p.Authorization)
		}
		if p.XSession != nil {
			req.Header.Set("X-Session", *p.XSession)
		}
		if p.APIKey != nil {
			req.Header.Set("API-Key", *p.APIKey)
		}
		return nil
	}
}

// DecodeDetachFromAccountResponse returns a decoder for responses returned by
// the twitter detach-from-account endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeDetachFromAccountResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("twitter", "detach-from-account", resp.StatusCode, string(body))
		}
	}
}

// BuildReceiveRequest instantiates a HTTP request object with method and path
// set to call the "twitter" service "receive" endpoint
func (c *Client) BuildReceiveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReceiveTwitterPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("twitter", "receive", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeReceiveRequest returns an encoder for requests sent to the twitter
// receive server.
func EncodeReceiveRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*twitter.ReceivePayload)
		if !ok {
			return goahttp.ErrInvalidType("twitter", "receive", "*twitter.ReceivePayload", v)
		}
		if p.Authorization != nil {
			req.Header.Set("Authorization", *p.Authorization)
		}
		if p.XSession != nil {
			req.Header.Set("X-Session", *p.XSession)
		}
		if p.RedirectURL != nil {
			req.Header.Set("RedirectURL", *p.RedirectURL)
		}
		if p.APIKey != nil {
			req.Header.Set("API-Key", *p.APIKey)
		}
		values := req.URL.Query()
		if p.OauthToken != nil {
			values.Add("oauth_token", *p.OauthToken)
		}
		if p.OauthVerifier != nil {
			values.Add("oauth_verifier", *p.OauthVerifier)
		}
		if p.State != nil {
			values.Add("state", *p.State)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeReceiveResponse returns a decoder for responses returned by the
// twitter receive endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeReceiveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ReceiveResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("twitter", "receive", err)
			}
			var (
				authorization string
				xSession      string
			)
			authorizationRaw := resp.Header.Get("Authorization")
			if authorizationRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
			}
			authorization = authorizationRaw
			xSessionRaw := resp.Header.Get("X-Session")
			if xSessionRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("X-Session", "header"))
			}
			xSession = xSessionRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("twitter", "receive", err)
			}
			p := NewReceiveUserMediaOK(&body, authorization, xSession)
			view := "default"
			vres := &twitterviews.UserMedia{p, view}
			if err = twitterviews.ValidateUserMedia(vres); err != nil {
				return nil, goahttp.ErrValidationError("twitter", "receive", err)
			}
			res := twitter.NewUserMedia(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("twitter", "receive", resp.StatusCode, string(body))
		}
	}
}
