// Code generated by goa v3.0.6, DO NOT EDIT.
//
// twitter HTTP client CLI support package
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package client

import (
	twitter "github.com/anshap1719/authentication/controllers/gen/twitter"
)

// BuildRegisterURLPayload builds the payload for the twitter register-url
// endpoint from CLI flags.
func BuildRegisterURLPayload(twitterRegisterURLAPIKey string) (*twitter.RegisterURLPayload, error) {
	var aPIKey *string
	{
		if twitterRegisterURLAPIKey != "" {
			aPIKey = &twitterRegisterURLAPIKey
		}
	}
	payload := &twitter.RegisterURLPayload{
		APIKey: aPIKey,
	}
	return payload, nil
}

// BuildAttachToAccountPayload builds the payload for the twitter
// attach-to-account endpoint from CLI flags.
func BuildAttachToAccountPayload(twitterAttachToAccountAuthorization string, twitterAttachToAccountXSession string, twitterAttachToAccountAPIKey string) (*twitter.AttachToAccountPayload, error) {
	var authorization *string
	{
		if twitterAttachToAccountAuthorization != "" {
			authorization = &twitterAttachToAccountAuthorization
		}
	}
	var xSession *string
	{
		if twitterAttachToAccountXSession != "" {
			xSession = &twitterAttachToAccountXSession
		}
	}
	var aPIKey *string
	{
		if twitterAttachToAccountAPIKey != "" {
			aPIKey = &twitterAttachToAccountAPIKey
		}
	}
	payload := &twitter.AttachToAccountPayload{
		Authorization: authorization,
		XSession:      xSession,
		APIKey:        aPIKey,
	}
	return payload, nil
}

// BuildDetachFromAccountPayload builds the payload for the twitter
// detach-from-account endpoint from CLI flags.
func BuildDetachFromAccountPayload(twitterDetachFromAccountAuthorization string, twitterDetachFromAccountXSession string, twitterDetachFromAccountAPIKey string) (*twitter.DetachFromAccountPayload, error) {
	var authorization *string
	{
		if twitterDetachFromAccountAuthorization != "" {
			authorization = &twitterDetachFromAccountAuthorization
		}
	}
	var xSession *string
	{
		if twitterDetachFromAccountXSession != "" {
			xSession = &twitterDetachFromAccountXSession
		}
	}
	var aPIKey *string
	{
		if twitterDetachFromAccountAPIKey != "" {
			aPIKey = &twitterDetachFromAccountAPIKey
		}
	}
	payload := &twitter.DetachFromAccountPayload{
		Authorization: authorization,
		XSession:      xSession,
		APIKey:        aPIKey,
	}
	return payload, nil
}

// BuildReceivePayload builds the payload for the twitter receive endpoint from
// CLI flags.
func BuildReceivePayload(twitterReceiveOauthToken string, twitterReceiveOauthVerifier string, twitterReceiveState string, twitterReceiveAuthorization string, twitterReceiveXSession string, twitterReceiveRedirectURL string, twitterReceiveAPIKey string) (*twitter.ReceivePayload, error) {
	var oauthToken string
	{
		oauthToken = twitterReceiveOauthToken
	}
	var oauthVerifier string
	{
		oauthVerifier = twitterReceiveOauthVerifier
	}
	var state string
	{
		state = twitterReceiveState
	}
	var authorization *string
	{
		if twitterReceiveAuthorization != "" {
			authorization = &twitterReceiveAuthorization
		}
	}
	var xSession *string
	{
		if twitterReceiveXSession != "" {
			xSession = &twitterReceiveXSession
		}
	}
	var redirectURL *string
	{
		if twitterReceiveRedirectURL != "" {
			redirectURL = &twitterReceiveRedirectURL
		}
	}
	var aPIKey *string
	{
		if twitterReceiveAPIKey != "" {
			aPIKey = &twitterReceiveAPIKey
		}
	}
	payload := &twitter.ReceivePayload{
		OauthToken:    &oauthToken,
		OauthVerifier: &oauthVerifier,
		State:         &state,
		Authorization: authorization,
		XSession:      xSession,
		RedirectURL:   redirectURL,
		APIKey:        aPIKey,
	}
	return payload, nil
}
