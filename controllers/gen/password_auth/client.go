// Code generated by goa v3.0.6, DO NOT EDIT.
//
// password-auth client
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package passwordauth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "password-auth" service client.
type Client struct {
	RegisterEndpoint            goa.Endpoint
	LoginEndpoint               goa.Endpoint
	RemoveEndpoint              goa.Endpoint
	ChangePasswordEndpoint      goa.Endpoint
	ResetEndpoint               goa.Endpoint
	ConfirmResetEndpoint        goa.Endpoint
	CheckEmailAvailableEndpoint goa.Endpoint
	CheckPhoneAvailableEndpoint goa.Endpoint
}

// NewClient initializes a "password-auth" service client given the endpoints.
func NewClient(register, login, remove, changePassword, reset, confirmReset, checkEmailAvailable, checkPhoneAvailable goa.Endpoint) *Client {
	return &Client{
		RegisterEndpoint:            register,
		LoginEndpoint:               login,
		RemoveEndpoint:              remove,
		ChangePasswordEndpoint:      changePassword,
		ResetEndpoint:               reset,
		ConfirmResetEndpoint:        confirmReset,
		CheckEmailAvailableEndpoint: checkEmailAvailable,
		CheckPhoneAvailableEndpoint: checkPhoneAvailable,
	}
}

// Register calls the "register" endpoint of the "password-auth" service.
// Register may return the following errors:
//	- "BadRequest" (type *goa.ServiceError)
//	- "Forbidden" (type *goa.ServiceError)
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) Register(ctx context.Context, p *RegisterParams) (res *UserMedia, err error) {
	var ires interface{}
	ires, err = c.RegisterEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UserMedia), nil
}

// Login calls the "login" endpoint of the "password-auth" service.
// Login may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError)
//	- "BadRequest" (type *goa.ServiceError)
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) Login(ctx context.Context, p *LoginParams) (res *UserMedia, err error) {
	var ires interface{}
	ires, err = c.LoginEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UserMedia), nil
}

// Remove calls the "remove" endpoint of the "password-auth" service.
// Remove may return the following errors:
//	- "NotFound" (type *goa.ServiceError)
//	- "Forbidden" (type *goa.ServiceError)
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) Remove(ctx context.Context, p *RemovePayload) (err error) {
	_, err = c.RemoveEndpoint(ctx, p)
	return
}

// ChangePassword calls the "change-password" endpoint of the "password-auth"
// service.
// ChangePassword may return the following errors:
//	- "BadRequest" (type *goa.ServiceError)
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) ChangePassword(ctx context.Context, p *ChangePasswordParams) (err error) {
	_, err = c.ChangePasswordEndpoint(ctx, p)
	return
}

// Reset calls the "reset" endpoint of the "password-auth" service.
// Reset may return the following errors:
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) Reset(ctx context.Context, p *ResetPayload) (err error) {
	_, err = c.ResetEndpoint(ctx, p)
	return
}

// ConfirmReset calls the "confirm-reset" endpoint of the "password-auth"
// service.
// ConfirmReset may return the following errors:
//	- "Forbidden" (type *goa.ServiceError)
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) ConfirmReset(ctx context.Context, p *ResetPasswordParams) (err error) {
	_, err = c.ConfirmResetEndpoint(ctx, p)
	return
}

// CheckEmailAvailable calls the "check-email-available" endpoint of the
// "password-auth" service.
// CheckEmailAvailable may return the following errors:
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) CheckEmailAvailable(ctx context.Context, p *CheckEmailAvailablePayload) (res bool, err error) {
	var ires interface{}
	ires, err = c.CheckEmailAvailableEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(bool), nil
}

// CheckPhoneAvailable calls the "check-phone-available" endpoint of the
// "password-auth" service.
// CheckPhoneAvailable may return the following errors:
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) CheckPhoneAvailable(ctx context.Context, p *CheckPhoneAvailablePayload) (res bool, err error) {
	var ires interface{}
	ires, err = c.CheckPhoneAvailableEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(bool), nil
}
