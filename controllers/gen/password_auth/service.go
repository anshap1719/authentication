// Code generated by goa v3.0.6, DO NOT EDIT.
//
// password-auth service
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package passwordauth

import (
	"context"

	passwordauthviews "github.com/anshap1719/authentication/controllers/gen/password_auth/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the password-auth service interface.
type Service interface {
	// Register a new user with an email and password
	Register(context.Context, *RegisterParams) (res *UserMedia, err error)
	// Login a user using an email and password
	Login(context.Context, *LoginParams) (res *UserMedia, err error)
	// Removes using a password as a login method
	Remove(context.Context, *RemovePayload) (err error)
	// Changes the user's current password to a new one, also adds a password to
	// the account if there is none
	ChangePassword(context.Context, *ChangePasswordParams) (err error)
	// Send an email to user to get a password reset, responds with no content even
	// if the email is not on any user account
	Reset(context.Context, *ResetPayload) (err error)
	// Confirms that a reset has been completed and changes the password to the new
	// one passed in
	ConfirmReset(context.Context, *ResetPasswordParams) (err error)
	// Checks if an email is available for signup
	CheckEmailAvailable(context.Context, *CheckEmailAvailablePayload) (res bool, err error)
	// Checks if an phone is available for signup
	CheckPhoneAvailable(context.Context, *CheckPhoneAvailablePayload) (res bool, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "password-auth"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [8]string{"register", "login", "remove", "change-password", "reset", "confirm-reset", "check-email-available", "check-phone-available"}

// RegisterParams is the payload type of the password-auth service register
// method.
type RegisterParams struct {
	// The email that will be attached to the account
	Email string
	// The user's given name
	FirstName string
	// The user's family name
	LastName string
	// The password associated with the new account
	Password string
	// The user's phone number
	Phone *string
	// The recaptcha response code
	GRecaptchaResponse string
	Authorization      *string
	XSession           *string
	APIKey             *string
}

// UserMedia is the result type of the password-auth service register method.
type UserMedia struct {
	// Unique unchanging user ID
	ID string
	// Given name for the user
	FirstName string
	// Family name for the user
	LastName string
	// Email attached to the account of the user
	Email string
	// Phone Number Of the user
	Phone string
	// When the user attempts to change their email, this is what they will change
	// it to after they verify that it belongs to them
	ChangingEmail *string
	// Whether the user has verified their email
	VerifiedEmail bool
	// Whether the user is an administrator on the site
	IsAdmin          *bool
	UpdatedAt        *string
	IsActive         *bool
	CreatedAt        *string
	CountryPhoneCode *string
	Authorization    string
	XSession         string
}

// LoginParams is the payload type of the password-auth service login method.
type LoginParams struct {
	// The email address of the account to login to
	Email string
	// The password of the account to login to
	Password string
	// 2 Factor Auth if user has enabled the feature
	TwoFactor *string
	Token     *string
	APIKey    *string
}

// RemovePayload is the payload type of the password-auth service remove method.
type RemovePayload struct {
	Authorization *string
	XSession      *string
	APIKey        *string
}

// ChangePasswordParams is the payload type of the password-auth service
// change-password method.
type ChangePasswordParams struct {
	// The old password for the current user account
	OldPassword *string
	// The new password for the current user account
	NewPassword   string
	Authorization string
	XSession      string
	APIKey        *string
}

// ResetPayload is the payload type of the password-auth service reset method.
type ResetPayload struct {
	Email  *string
	APIKey *string
}

// ResetPasswordParams is the payload type of the password-auth service
// confirm-reset method.
type ResetPasswordParams struct {
	// The UUID of the password reset, send from the user's email
	ResetCode string
	// The ID of the user to reset the password of
	UserID string
	// The new password that will be used to login to the account
	NewPassword string
	APIKey      *string
}

// CheckEmailAvailablePayload is the payload type of the password-auth service
// check-email-available method.
type CheckEmailAvailablePayload struct {
	Email  *string
	APIKey *string
}

// CheckPhoneAvailablePayload is the payload type of the password-auth service
// check-phone-available method.
type CheckPhoneAvailablePayload struct {
	Phone  *string
	APIKey *string
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "Forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "InternalServerError",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "Unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewUserMedia initializes result type UserMedia from viewed result type
// UserMedia.
func NewUserMedia(vres *passwordauthviews.UserMedia) *UserMedia {
	var res *UserMedia
	switch vres.View {
	case "default", "":
		res = newUserMedia(vres.Projected)
	}
	return res
}

// NewViewedUserMedia initializes viewed result type UserMedia from result type
// UserMedia using the given view.
func NewViewedUserMedia(res *UserMedia, view string) *passwordauthviews.UserMedia {
	var vres *passwordauthviews.UserMedia
	switch view {
	case "default", "":
		p := newUserMediaView(res)
		vres = &passwordauthviews.UserMedia{p, "default"}
	}
	return vres
}

// newUserMedia converts projected type UserMedia to service type UserMedia.
func newUserMedia(vres *passwordauthviews.UserMediaView) *UserMedia {
	res := &UserMedia{
		UpdatedAt:        vres.UpdatedAt,
		CreatedAt:        vres.CreatedAt,
		CountryPhoneCode: vres.CountryPhoneCode,
		ChangingEmail:    vres.ChangingEmail,
		IsAdmin:          vres.IsAdmin,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Phone != nil {
		res.Phone = *vres.Phone
	}
	if vres.LastName != nil {
		res.LastName = *vres.LastName
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	if vres.FirstName != nil {
		res.FirstName = *vres.FirstName
	}
	if vres.VerifiedEmail != nil {
		res.VerifiedEmail = *vres.VerifiedEmail
	}
	if vres.Authorization != nil {
		res.Authorization = *vres.Authorization
	}
	if vres.XSession != nil {
		res.XSession = *vres.XSession
	}
	return res
}

// newUserMediaView projects result type UserMedia to projected type
// UserMediaView using the "default" view.
func newUserMediaView(res *UserMedia) *passwordauthviews.UserMediaView {
	vres := &passwordauthviews.UserMediaView{
		ID:               &res.ID,
		FirstName:        &res.FirstName,
		LastName:         &res.LastName,
		Email:            &res.Email,
		Phone:            &res.Phone,
		ChangingEmail:    res.ChangingEmail,
		VerifiedEmail:    &res.VerifiedEmail,
		IsAdmin:          res.IsAdmin,
		UpdatedAt:        res.UpdatedAt,
		CreatedAt:        res.CreatedAt,
		CountryPhoneCode: res.CountryPhoneCode,
		Authorization:    &res.Authorization,
		XSession:         &res.XSession,
	}
	return vres
}
