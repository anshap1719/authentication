// Code generated by goa v3.0.6, DO NOT EDIT.
//
// instagram service
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package instagram

import (
	"context"

	instagramviews "github.com/anshap1719/authentication/controllers/gen/instagram/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the instagram service interface.
type Service interface {
	// Gets the URL the front-end should redirect the browser to in order to be
	// authenticated with Instagram, and then register
	RegisterURL(context.Context, *RegisterURLPayload) (res string, err error)
	// Attaches a Instagram account to an existing user account, returns the URL
	// the browser should be redirected to
	AttachToAccount(context.Context, *AttachToAccountPayload) (res string, err error)
	// Detaches a Instagram account from an existing user account.
	DetachFromAccount(context.Context, *DetachFromAccountPayload) (err error)
	// The endpoint that Instagram redirects the browser to after the user has
	// authenticated
	Receive(context.Context, *ReceivePayload) (res *UserMedia, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "instagram"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"register-url", "attach-to-account", "detach-from-account", "receive"}

// RegisterURLPayload is the payload type of the instagram service register-url
// method.
type RegisterURLPayload struct {
	APIKey      *string
	RedirectURL *string
}

// AttachToAccountPayload is the payload type of the instagram service
// attach-to-account method.
type AttachToAccountPayload struct {
	Authorization *string
	XSession      *string
	APIKey        *string
	RedirectURL   *string
}

// DetachFromAccountPayload is the payload type of the instagram service
// detach-from-account method.
type DetachFromAccountPayload struct {
	Authorization *string
	XSession      *string
	APIKey        *string
}

// ReceivePayload is the payload type of the instagram service receive method.
type ReceivePayload struct {
	Code          *string
	State         *string
	Authorization *string
	XSession      *string
	APIKey        *string
	RedirectURL   *string
}

// UserMedia is the result type of the instagram service receive method.
type UserMedia struct {
	// Unique unchanging user ID
	ID string
	// Given name for the user
	FirstName string
	// Family name for the user
	LastName string
	// Email attached to the account of the user
	Email string
	// Phone Number Of the user
	Phone string
	// When the user attempts to change their email, this is what they will change
	// it to after they verify that it belongs to them
	ChangingEmail *string
	// Whether the user has verified their email
	VerifiedEmail bool
	// Whether the user is an administrator on the site
	IsAdmin          *bool
	UpdatedAt        *string
	IsActive         *bool
	CreatedAt        *string
	CountryPhoneCode *string
	Authorization    string
	XSession         string
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "InternalServerError",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "Forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "Unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewUserMedia initializes result type UserMedia from viewed result type
// UserMedia.
func NewUserMedia(vres *instagramviews.UserMedia) *UserMedia {
	var res *UserMedia
	switch vres.View {
	case "default", "":
		res = newUserMedia(vres.Projected)
	}
	return res
}

// NewViewedUserMedia initializes viewed result type UserMedia from result type
// UserMedia using the given view.
func NewViewedUserMedia(res *UserMedia, view string) *instagramviews.UserMedia {
	var vres *instagramviews.UserMedia
	switch view {
	case "default", "":
		p := newUserMediaView(res)
		vres = &instagramviews.UserMedia{p, "default"}
	}
	return vres
}

// newUserMedia converts projected type UserMedia to service type UserMedia.
func newUserMedia(vres *instagramviews.UserMediaView) *UserMedia {
	res := &UserMedia{
		UpdatedAt:        vres.UpdatedAt,
		CreatedAt:        vres.CreatedAt,
		CountryPhoneCode: vres.CountryPhoneCode,
		ChangingEmail:    vres.ChangingEmail,
		IsAdmin:          vres.IsAdmin,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Phone != nil {
		res.Phone = *vres.Phone
	}
	if vres.LastName != nil {
		res.LastName = *vres.LastName
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	if vres.FirstName != nil {
		res.FirstName = *vres.FirstName
	}
	if vres.VerifiedEmail != nil {
		res.VerifiedEmail = *vres.VerifiedEmail
	}
	if vres.Authorization != nil {
		res.Authorization = *vres.Authorization
	}
	if vres.XSession != nil {
		res.XSession = *vres.XSession
	}
	return res
}

// newUserMediaView projects result type UserMedia to projected type
// UserMediaView using the "default" view.
func newUserMediaView(res *UserMedia) *instagramviews.UserMediaView {
	vres := &instagramviews.UserMediaView{
		ID:               &res.ID,
		FirstName:        &res.FirstName,
		LastName:         &res.LastName,
		Email:            &res.Email,
		Phone:            &res.Phone,
		ChangingEmail:    res.ChangingEmail,
		VerifiedEmail:    &res.VerifiedEmail,
		IsAdmin:          res.IsAdmin,
		UpdatedAt:        res.UpdatedAt,
		CreatedAt:        res.CreatedAt,
		CountryPhoneCode: res.CountryPhoneCode,
		Authorization:    &res.Authorization,
		XSession:         &res.XSession,
	}
	return vres
}
