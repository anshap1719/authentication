// Code generated by goa v3.0.6, DO NOT EDIT.
//
// user service
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package user

import (
	"context"

	userviews "github.com/anshap1719/authentication/controllers/gen/user/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the user service interface.
type Service interface {
	// Returns whether Oauth is attached or not
	GetAuths(context.Context, *GetAuthsPayload) (res *AuthStatusMedia, err error)
	// Disable a user's account
	Deactivate(context.Context, *DeactivatePayload) (err error)
	// Get a user's details
	GetUser(context.Context, *GetUserPayload) (res *UserMedia, err error)
	// Validates an email address, designed to be called by users directly in their
	// browser
	ValidateEmail(context.Context, *ValidateEmailPayload) (err error)
	// Update a user
	UpdateUser(context.Context, *UserUpdateParams) (res *UserMedia, err error)
	// Resends a verify email for the current user, also invalidates the link on
	// the previously send email verification
	ResendVerifyEmail(context.Context, *ResendVerifyEmailPayload) (err error)
	// Update Phone and send an OTP to entered phone for verification
	UpdatePhone(context.Context, *UpdatePhonePayload) (err error)
	// Resend otp for phone verification
	ResendOtp(context.Context, *ResendOtpPayload) (err error)
	// Verify phone with entered phone
	VerifyPhone(context.Context, *VerifyPhonePayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [9]string{"getAuths", "deactivate", "getUser", "validate-email", "update-user", "resend-verify-email", "update-phone", "resend-otp", "verify-phone"}

// GetAuthsPayload is the payload type of the user service getAuths method.
type GetAuthsPayload struct {
	UserID        *string
	Authorization *string
	XSession      *string
	APIKey        *string
}

// AuthStatusMedia is the result type of the user service getAuths method.
type AuthStatusMedia struct {
	// True if user has google Oauth signin
	Google bool
	// True if user has facebook Oauth signin
	Facebook bool
	// True if user has twitter Oauth signin
	Twitter bool
	// True if user has linkedin Oauth signin
	Linkedin bool
	// True if user has microsoft Oauth signin
	Instagram bool
	// True if user has password signin
	Standard bool
}

// DeactivatePayload is the payload type of the user service deactivate method.
type DeactivatePayload struct {
	ID            *string
	Admin         *string
	Authorization *string
	XSession      *string
	APIKey        *string
}

// GetUserPayload is the payload type of the user service getUser method.
type GetUserPayload struct {
	Authorization *string
	XSession      *string
	APIKey        *string
}

// UserMedia is the result type of the user service getUser method.
type UserMedia struct {
	// Unique unchanging user ID
	ID string
	// Given name for the user
	FirstName string
	// Family name for the user
	LastName string
	// Email attached to the account of the user
	Email string
	// Phone Number Of the user
	Phone string
	// When the user attempts to change their email, this is what they will change
	// it to after they verify that it belongs to them
	ChangingEmail *string
	// Whether the user has verified their email
	VerifiedEmail bool
	// Whether the user is an administrator on the site
	IsAdmin          *bool
	UpdatedAt        *string
	IsActive         *bool
	CreatedAt        *string
	CountryPhoneCode *string
	Authorization    string
	XSession         string
}

// ValidateEmailPayload is the payload type of the user service validate-email
// method.
type ValidateEmailPayload struct {
	ValidateID *string
	APIKey     *string
}

// UserUpdateParams is the payload type of the user service update-user method.
type UserUpdateParams struct {
	// Given name for the user
	FirstName *string
	// Family name for the user
	LastName *string
	// Email attached to the account of the user
	Email *string
	// Phone Number Of the user
	Phone *string
	// When the user attempts to change their email, this is what they will change
	// it to after they verify that it belongs to them
	ChangingEmail *string
	// Whether the user has verified their email
	VerifiedEmail *bool
	// Whether the user is an administrator on the site
	IsAdmin          *bool
	CountryPhoneCode *string
	Authorization    *string
	XSession         *string
	APIKey           *string
}

// ResendVerifyEmailPayload is the payload type of the user service
// resend-verify-email method.
type ResendVerifyEmailPayload struct {
	Authorization *string
	XSession      *string
	APIKey        *string
}

// UpdatePhonePayload is the payload type of the user service update-phone
// method.
type UpdatePhonePayload struct {
	Phone         *string
	Country       *string
	Authorization *string
	XSession      *string
	APIKey        *string
}

// ResendOtpPayload is the payload type of the user service resend-otp method.
type ResendOtpPayload struct {
	Authorization *string
	XSession      *string
	APIKey        *string
}

// VerifyPhonePayload is the payload type of the user service verify-phone
// method.
type VerifyPhonePayload struct {
	Otp           *string
	Authorization *string
	XSession      *string
	APIKey        *string
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "Unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "InternalServerError",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "Forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewAuthStatusMedia initializes result type AuthStatusMedia from viewed
// result type AuthStatusMedia.
func NewAuthStatusMedia(vres *userviews.AuthStatusMedia) *AuthStatusMedia {
	var res *AuthStatusMedia
	switch vres.View {
	case "default", "":
		res = newAuthStatusMedia(vres.Projected)
	}
	return res
}

// NewViewedAuthStatusMedia initializes viewed result type AuthStatusMedia from
// result type AuthStatusMedia using the given view.
func NewViewedAuthStatusMedia(res *AuthStatusMedia, view string) *userviews.AuthStatusMedia {
	var vres *userviews.AuthStatusMedia
	switch view {
	case "default", "":
		p := newAuthStatusMediaView(res)
		vres = &userviews.AuthStatusMedia{p, "default"}
	}
	return vres
}

// NewUserMedia initializes result type UserMedia from viewed result type
// UserMedia.
func NewUserMedia(vres *userviews.UserMedia) *UserMedia {
	var res *UserMedia
	switch vres.View {
	case "default", "":
		res = newUserMedia(vres.Projected)
	}
	return res
}

// NewViewedUserMedia initializes viewed result type UserMedia from result type
// UserMedia using the given view.
func NewViewedUserMedia(res *UserMedia, view string) *userviews.UserMedia {
	var vres *userviews.UserMedia
	switch view {
	case "default", "":
		p := newUserMediaView(res)
		vres = &userviews.UserMedia{p, "default"}
	}
	return vres
}

// newAuthStatusMedia converts projected type AuthStatusMedia to service type
// AuthStatusMedia.
func newAuthStatusMedia(vres *userviews.AuthStatusMediaView) *AuthStatusMedia {
	res := &AuthStatusMedia{}
	if vres.Google != nil {
		res.Google = *vres.Google
	}
	if vres.Facebook != nil {
		res.Facebook = *vres.Facebook
	}
	if vres.Twitter != nil {
		res.Twitter = *vres.Twitter
	}
	if vres.Linkedin != nil {
		res.Linkedin = *vres.Linkedin
	}
	if vres.Instagram != nil {
		res.Instagram = *vres.Instagram
	}
	if vres.Standard != nil {
		res.Standard = *vres.Standard
	}
	return res
}

// newAuthStatusMediaView projects result type AuthStatusMedia to projected
// type AuthStatusMediaView using the "default" view.
func newAuthStatusMediaView(res *AuthStatusMedia) *userviews.AuthStatusMediaView {
	vres := &userviews.AuthStatusMediaView{
		Google:    &res.Google,
		Facebook:  &res.Facebook,
		Twitter:   &res.Twitter,
		Linkedin:  &res.Linkedin,
		Instagram: &res.Instagram,
		Standard:  &res.Standard,
	}
	return vres
}

// newUserMedia converts projected type UserMedia to service type UserMedia.
func newUserMedia(vres *userviews.UserMediaView) *UserMedia {
	res := &UserMedia{
		UpdatedAt:        vres.UpdatedAt,
		CreatedAt:        vres.CreatedAt,
		CountryPhoneCode: vres.CountryPhoneCode,
		ChangingEmail:    vres.ChangingEmail,
		IsAdmin:          vres.IsAdmin,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Phone != nil {
		res.Phone = *vres.Phone
	}
	if vres.LastName != nil {
		res.LastName = *vres.LastName
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	if vres.FirstName != nil {
		res.FirstName = *vres.FirstName
	}
	if vres.VerifiedEmail != nil {
		res.VerifiedEmail = *vres.VerifiedEmail
	}
	if vres.Authorization != nil {
		res.Authorization = *vres.Authorization
	}
	if vres.XSession != nil {
		res.XSession = *vres.XSession
	}
	return res
}

// newUserMediaView projects result type UserMedia to projected type
// UserMediaView using the "default" view.
func newUserMediaView(res *UserMedia) *userviews.UserMediaView {
	vres := &userviews.UserMediaView{
		ID:               &res.ID,
		FirstName:        &res.FirstName,
		LastName:         &res.LastName,
		Email:            &res.Email,
		Phone:            &res.Phone,
		ChangingEmail:    res.ChangingEmail,
		VerifiedEmail:    &res.VerifiedEmail,
		IsAdmin:          res.IsAdmin,
		UpdatedAt:        res.UpdatedAt,
		CreatedAt:        res.CreatedAt,
		CountryPhoneCode: res.CountryPhoneCode,
		Authorization:    &res.Authorization,
		XSession:         &res.XSession,
	}
	return vres
}
