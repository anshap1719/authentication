// Code generated by goa v3.0.6, DO NOT EDIT.
//
// session views
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// AllSessions is the viewed result type that is projected based on a view.
type AllSessions struct {
	// Type to project
	Projected *AllSessionsView
	// View to render
	View string
}

// AllSessionsView is a type that runs validations on a projected type.
type AllSessionsView struct {
	CurrentSession *SessionView
	OtherSessions  SessionCollectionView
}

// SessionView is a type that runs validations on a projected type.
type SessionView struct {
	// Unique unchanging session ID
	ID *string
	// ID of the user this session is for
	UserID *string
	// Time that this session was last used
	LastUsed *string
	// The browser and browser version connected with this session
	Browser *string
	// The OS of the system where this session was used
	Os *string
	// The last IP address where this session was used
	IP *string
	// A humanReadable string describing the last known location of the session
	Location *string
	// The latitude of the last known location of the session
	Latitude *string
	// The longitude of the last known location of the session
	Longitude *string
	// Whether the session was from a mobile device
	IsMobile *bool
	// The URL of the Google map to show the location, suitable for using in an img
	// tag
	MapURL *string
}

// SessionCollectionView is a type that runs validations on a projected type.
type SessionCollectionView []*SessionView

var (
	// AllSessionsMap is a map of attribute names in result type AllSessions
	// indexed by view name.
	AllSessionsMap = map[string][]string{
		"default": []string{
			"currentSession",
			"otherSessions",
		},
	}
	// SessionMap is a map of attribute names in result type Session indexed by
	// view name.
	SessionMap = map[string][]string{
		"default": []string{
			"id",
			"userId",
			"lastUsed",
			"browser",
			"os",
			"ip",
			"location",
			"latitude",
			"longitude",
			"isMobile",
			"mapUrl",
		},
	}
	// SessionCollectionMap is a map of attribute names in result type
	// SessionCollection indexed by view name.
	SessionCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"userId",
			"lastUsed",
			"browser",
			"os",
			"ip",
			"location",
			"latitude",
			"longitude",
			"isMobile",
			"mapUrl",
		},
	}
)

// ValidateAllSessions runs the validations defined on the viewed result type
// AllSessions.
func ValidateAllSessions(result *AllSessions) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAllSessionsView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateAllSessionsView runs the validations defined on AllSessionsView
// using the "default" view.
func ValidateAllSessionsView(result *AllSessionsView) (err error) {

	if result.CurrentSession != nil {
		if err2 := ValidateSessionView(result.CurrentSession); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.OtherSessions != nil {
		if err2 := ValidateSessionCollectionView(result.OtherSessions); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSessionView runs the validations defined on SessionView using the
// "default" view.
func ValidateSessionView(result *SessionView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "result"))
	}
	if result.LastUsed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastUsed", "result"))
	}
	if result.Browser == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("browser", "result"))
	}
	if result.Os == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("os", "result"))
	}
	if result.IP == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ip", "result"))
	}
	if result.Location == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("location", "result"))
	}
	if result.Latitude == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("latitude", "result"))
	}
	if result.Longitude == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("longitude", "result"))
	}
	if result.IsMobile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isMobile", "result"))
	}
	if result.MapURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mapUrl", "result"))
	}
	if result.LastUsed != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.lastUsed", *result.LastUsed, goa.FormatDateTime))
	}
	return
}

// ValidateSessionCollectionView runs the validations defined on
// SessionCollectionView using the "default" view.
func ValidateSessionCollectionView(result SessionCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSessionView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
