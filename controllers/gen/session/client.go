// Code generated by goa v3.0.6, DO NOT EDIT.
//
// session client
//
// Command:
// $ goa gen github.com/anshap1719/authentication/design

package session

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "session" service client.
type Client struct {
	RefreshEndpoint         goa.Endpoint
	LogoutEndpoint          goa.Endpoint
	LogoutOtherEndpoint     goa.Endpoint
	LogoutSpecificEndpoint  goa.Endpoint
	GetSessionsEndpoint     goa.Endpoint
	RedeemTokenEndpoint     goa.Endpoint
	CleanSessionsEndpoint   goa.Endpoint
	CleanLoginTokenEndpoint goa.Endpoint
	CleanMergeTokenEndpoint goa.Endpoint
}

// NewClient initializes a "session" service client given the endpoints.
func NewClient(refresh, logout, logoutOther, logoutSpecific, getSessions, redeemToken, cleanSessions, cleanLoginToken, cleanMergeToken goa.Endpoint) *Client {
	return &Client{
		RefreshEndpoint:         refresh,
		LogoutEndpoint:          logout,
		LogoutOtherEndpoint:     logoutOther,
		LogoutSpecificEndpoint:  logoutSpecific,
		GetSessionsEndpoint:     getSessions,
		RedeemTokenEndpoint:     redeemToken,
		CleanSessionsEndpoint:   cleanSessions,
		CleanLoginTokenEndpoint: cleanLoginToken,
		CleanMergeTokenEndpoint: cleanMergeToken,
	}
}

// Refresh calls the "refresh" endpoint of the "session" service.
// Refresh may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError)
//	- "BadRequest" (type *goa.ServiceError)
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) Refresh(ctx context.Context, p *RefreshPayload) (res *RefreshResult, err error) {
	var ires interface{}
	ires, err = c.RefreshEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*RefreshResult), nil
}

// Logout calls the "logout" endpoint of the "session" service.
// Logout may return the following errors:
//	- "BadRequest" (type *goa.ServiceError)
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) Logout(ctx context.Context, p *LogoutPayload) (err error) {
	_, err = c.LogoutEndpoint(ctx, p)
	return
}

// LogoutOther calls the "logout-other" endpoint of the "session" service.
// LogoutOther may return the following errors:
//	- "BadRequest" (type *goa.ServiceError)
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) LogoutOther(ctx context.Context, p *LogoutOtherPayload) (err error) {
	_, err = c.LogoutOtherEndpoint(ctx, p)
	return
}

// LogoutSpecific calls the "logout-specific" endpoint of the "session" service.
// LogoutSpecific may return the following errors:
//	- "BadRequest" (type *goa.ServiceError)
//	- "NotFound" (type *goa.ServiceError)
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) LogoutSpecific(ctx context.Context, p *LogoutSpecificPayload) (err error) {
	_, err = c.LogoutSpecificEndpoint(ctx, p)
	return
}

// GetSessions calls the "get-sessions" endpoint of the "session" service.
// GetSessions may return the following errors:
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) GetSessions(ctx context.Context, p *GetSessionsPayload) (res *AllSessions, err error) {
	var ires interface{}
	ires, err = c.GetSessionsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AllSessions), nil
}

// RedeemToken calls the "redeemToken" endpoint of the "session" service.
// RedeemToken may return the following errors:
//	- "Forbidden" (type *goa.ServiceError)
//	- "InternalServerError" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) RedeemToken(ctx context.Context, p *RedeemTokenPayload) (res *RedeemTokenResult, err error) {
	var ires interface{}
	ires, err = c.RedeemTokenEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*RedeemTokenResult), nil
}

// CleanSessions calls the "clean-sessions" endpoint of the "session" service.
// CleanSessions may return the following errors:
//	- "Forbidden" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) CleanSessions(ctx context.Context, p *CleanSessionsPayload) (err error) {
	_, err = c.CleanSessionsEndpoint(ctx, p)
	return
}

// CleanLoginToken calls the "clean-login-token" endpoint of the "session"
// service.
// CleanLoginToken may return the following errors:
//	- "Forbidden" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) CleanLoginToken(ctx context.Context, p *CleanLoginTokenPayload) (err error) {
	_, err = c.CleanLoginTokenEndpoint(ctx, p)
	return
}

// CleanMergeToken calls the "clean-merge-token" endpoint of the "session"
// service.
// CleanMergeToken may return the following errors:
//	- "Forbidden" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) CleanMergeToken(ctx context.Context, p *CleanMergeTokenPayload) (err error) {
	_, err = c.CleanMergeTokenEndpoint(ctx, p)
	return
}
